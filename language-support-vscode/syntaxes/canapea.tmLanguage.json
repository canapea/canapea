{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "fileTypes": ["cnp", "canapea"],
  "name": "Canapea",
  "scopeName": "source.canapea",
  "patterns": [
    {
      "include": "#import"
    },
    {
      "include": "#module"
    },
    {
      "include": "#function-declaration"
    },
    {
      "include": "#debug"
    },
    {
      "include": "#comments"
    },
    {
      "match": "\\b(_)\\b",
      "name": "keyword.unused.canapea"
    },
    {
      "include": "#type-signature"
    },
    {
      "include": "#custom-type-declaration"
    },
    {
      "include": "#record-declaration"
    },
    {
      "include": "#string-triple"
    },
    {
      "include": "#string-quote"
    },
    {
      "include": "#char"
    },
    {
      "comment": "Decimals are *NOT* IEEE Floats",
      "match": "\\b(-?[0-9]+\\.[0-9]+)\\b",
      "name": "constant.numeric.canapea"
    },
    {
      "match": "\\b(-?[0-9]+)\\b",
      "name": "constant.numeric.canapea"
    },
    {
      "include": "#custom-type-constructor"
    },
    {
      "Comment": "Splats and rest arguments",
      "match": "\\b(\\.\\.\\.)([_a-z][a-zA-Z0-9]*)\\b",
      "captures": {
        "2": {
          "name": "constant.other"
        }
      }
    },
    {
      "name": "meta.record.field.canapea",
      "match": "(\\{)\\s+([a-z][a-zA-Z0-9_]*)\\s+(\\=)",
      "captures": {
        "1": {
          "name": "punctuation.bracket.canapea"
        },
        "2": {
          "name": "entity.name.record.field.canapea"
        },
        "3": {
          "name": "keyword.operator.assignment.canapea"
        }
      }
    },
    {
      "name": "meta.record.field.canapea",
      "match": "(,)\\s+([a-z][a-zA-Z0-9_]*)\\s+(\\=)",
      "captures": {
        "1": {
          "name": "punctuation.separator.comma.canapea"
        },
        "2": {
          "name": "entity.name.record.field.canapea"
        },
        "3": {
          "name": "keyword.operator.assignment.canapea"
        }
      }
    },
    {
      "match": "(\\}|\\{)",
      "name": "punctuation.bracket.canapea"
    },
    {
      "include": "#comma"
    },
    {
      "include": "#parens"
    },
    {
      "match": "(->)",
      "name": "keyword.operator.arrow.canapea"
    },
    {
      "match": "(|>)",
      "name": "keyword.operator.pipe.canapea"
    },
    {
      "include": "#binary-operator"
    },
    {
      "match": "(\\=|\\:|\\||\\\\)",
      "name": "keyword.other.canapea"
    },
    {
      "match": "\\b(type|function|record|as|exposing|capability|let)\\s+",
      "name": "keyword.other.canapea"
    },
    {
      "match": "\\b(app|when|is|with|expect)\\s+",
      "name": "keyword.control.canapea"
    },
    {
      "include": "#record-accessor"
    },
    {
      "include": "#top-level-value"
    },
    {
      "include": "#value"
    },
    {
      "include": "#period"
    },
    {
      "include": "#square-brackets"
    }
  ],
  "repository": {
    "binary-operator": {
      "match": "([@!?&+\\-*\/%;.><]|[@!?&|=+\\-*\/%;.><]+)",
      "name": "keyword.operator.canapea"
    },
    "char": {
      "comment": "Not sure whether 'char' will be supported or not",
      "name": "string.quoted.single.canapea",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.char.begin.canapea"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.char.end.canapea"
        }
      },
      "patterns": [
        {
          "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]|x[0-9a-fA-F]{1,5})",
          "name": "constant.character.escape.canapea"
        },
        {
          "match": "\\^[A-Z@\\[\\]\\\\\\^_]",
          "name": "constant.character.escape.control.canapea"
        }
      ]
    },
    "comma": {
      "match": "(,)",
      "name": "punctuation.separator.comma.canapea"
    },
    "comments": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.canapea"
            }
          },
          "begin": "#",
          "end": "$",
          "name": "comment.line.hash.canapea"
        }
      ]
    },
    "custom-type-constructor": {
      "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
      "name": "constant.custom-type-constructor.canapea"
    },
    "custom-type-declaration": {
      "begin": "^(type\\s+)([A-Z][a-zA-Z0-9_]*)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.type.canapea"
        },
        "2": {
          "name": "storage.type.canapea"
        }
      },
      "end": "^(?=\\S)",
      "name": "meta.function.type-declaration.canapea",
      "patterns": [
        {
          "name": "meta.record.field.canapea",
          "match": "^\\s*([A-Z][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "constant.custom-type-constructor.canapea"
            }
          }
        },
        {
          "match": "\\s+",
          "name": "punctuation.spaces.canapea"
        },
        {
          "name": "meta.record.field.canapea",
          "match": "(\\=|\\|)\\s+([A-Z][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.operator.assignment.canapea"
            },
            "2": {
              "name": "constant.custom-type-constructor.canapea"
            }
          }
        },
        {
          "match": "\\=",
          "name": "keyword.operator.assignment.canapea"
        },
        {
          "match": "\\-\\>",
          "name": "keyword.operator.arrow.canapea"
        },
        {
          "include": "#module-prefix"
        },
        {
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
          "name": "variable.type.canapea"
        },
        {
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
          "name": "storage.type.canapea"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#type-record"
        }
      ]
    },
    "debug": {
      "comment": "Not sure what we use for type holes during development",
      "match": "\\b(debug)\\b",
      "name": "invalid.illegal.debug.canapea"
    },
    "import": {
      "name": "meta.import.canapea",
      "begin": "^\\b(import)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.import.canapea"
        }
      },
      "end": "\\n(?!\\s)",
      "patterns": [
        {
          "match": "(as|exposing)",
          "name": "keyword.control.canapea"
        },
        {
          "include": "#module-chunk"
        },
        {
          "include": "#period"
        },
        {
          "match": "\\s+",
          "name": "punctuation.spaces.canapea"
        },
        {
          "include": "#module-exports"
        }
      ]
    },
    "function-declaration": {
      "begin": "^(function\\s+)([A-Z][a-zA-Z0-9_]*)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.type.canapea"
        },
        "2": {
          "name": "entity.name.function.canapea"
        }
      },
      "end": "^(?=\\S)",
      "name": "meta.function.type-declaration.canapea",
      "patterns": [
        {
          "name": "meta.record.field.canapea",
          "match": "^\\s*([A-Z][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "constant.custom-type-constructor.canapea"
            }
          }
        },
        {
          "match": "\\s+",
          "name": "punctuation.spaces.canapea"
        },
        {
          "name": "meta.record.field.canapea",
          "match": "(\\=|\\|)\\s+([A-Z][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.operator.assignment.canapea"
            },
            "2": {
              "name": "constant.custom-type-constructor.canapea"
            }
          }
        },
        {
          "match": "\\=",
          "name": "keyword.operator.assignment.canapea"
        },
        {
          "include": "#module-prefix"
        },
        {
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
          "name": "variable.type.canapea"
        },
        {
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
          "name": "storage.type.canapea"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "module": {
      "begin": "^\\b(module)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.canapea"
        }
      },
      "end": "\\n(?!\\s)",
      "endCaptures": {
        "1": {
          "name": "keyword.other.canapea"
        }
      },
      "name": "meta.declaration.module.canapea",
      "patterns": [
        {
          "include": "#string-quote"
        },
        {
          "match": "(exposing)",
          "name": "keyword.other.canapea"
        },
        {
          "match": "\\s+",
          "name": "punctuation.spaces.canapea"
        },
        {
          "include": "#module-exports"
        }
      ]
    },
    "module-exports": {
      "begin": "(\\|)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.pipe.module-export.canapea"
        }
      },
      "end": "\\n(?!\\s)",
      "endCaptures": {
        "1": {
          "name": "keyword.other.canapea"
        }
      },
      "name": "meta.declaration.exports.canapea",
      "patterns": [
        {
          "match": "\\b[a-z][a-zA-Z_0-9]*",
          "name": "entity.name.function.canapea"
        },
        {
          "match": "\\b[A-Z][A-Za-z_0-9]*",
          "name": "storage.type.canapea"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.canapea"
        },
        {
          "match": "\\s+",
          "name": "punctuation.spaces.canapea"
        },
        {
          "include": "#comma"
        },
        {
          "match": "\\(\\.\\.\\)",
          "name": "punctuation.parens.ellipses.canapea"
        },
        {
          "match": "\\.\\.",
          "name": "punctuation.parens.ellipses.canapea"
        },
        {
          "comment": "So named because I don't know what to call this.",
          "match": "\\(.*?\\)",
          "name": "meta.other.unknown.canapea"
        }
      ]
    },
    "module-prefix": {
      "match": "([a-z][a-zA-Z0-9_]*)(\\.)",
      "name": "meta.module.name.canapea",
      "captures": {
        "1": {
          "name": "support.module.canapea"
        },
        "2": {
          "name": "keyword.other.period.canapea"
        }
      }
    },
    "parens": {
      "match": "(\\(|\\))",
      "name": "punctuation.parens.canapea"
    },
    "period": {
      "match": "[.]",
      "name": "keyword.other.period.canapea"
    },
    "record-accessor": {
      "match": "(\\.)([a-z][a-zA-Z0-9_]*)",
      "name": "meta.record.accessor",
      "captures": {
        "1": {
          "name": "keyword.other.period.canapea"
        },
        "2": {
          "name": "entity.name.record.field.accessor.canapea"
        }
      }
    },
    "record-declaration": {
      "begin": "^(record\\s+)([A-Z][a-zA-Z0-9_]*)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.type.canapea"
        },
        "2": {
          "name": "storage.type.canapea"
        }
      },
      "end": "^(?=\\S)",
      "name": "meta.function.type-declaration.canapea",
      "patterns": [
        {
          "match": "\\n\\s+",
          "name": "punctuation.spaces.canapea"
        },
        {
          "match": "\\=",
          "name": "keyword.operator.assignment.canapea"
        },
        {
          "include": "#module-prefix"
        },
        {
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
          "name": "storage.type.canapea"
        },
        {
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
          "name": "variable.type.canapea"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#type-record"
        }
      ]
    },
    "record-prefix": {
      "comment": "We probably also need this for general qualified access",
      "match": "([a-z][a-zA-Z0-9_]*)(\\.)([a-z][a-zA-Z0-9_]*)",
      "name": "record.accessor.canapea",
      "captures": {
        "1": {
          "name": "record.name.canapea"
        },
        "2": {
          "name": "keyword.other.period.canapea"
        },
        "3": {
          "name": "entity.name.record.field.accessor.canapea"
        }
      }
    },
    "square-brackets": {
      "match": "[\\[\\]]",
      "name": "punctuation.definition.sequence.canapea"
    },
    "string-quote": {
      "name": "string.quoted.double.canapea",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.canapea"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.canapea"
        }
      },
      "patterns": [
        {
          "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]|x[0-9a-fA-F]{1,5})",
          "name": "constant.character.escape.canapea"
        },
        {
          "match": "\\^[A-Z@\\[\\]\\\\\\^_]",
          "name": "constant.character.escape.control.canapea"
        }
      ]
    },
    "string-triple": {
      "name": "string.quoted.triple.canapea",
      "begin": "\"\"\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.canapea"
        }
      },
      "end": "\"\"\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.canapea"
        }
      },
      "patterns": [
        {
          "match": "\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]|x[0-9a-fA-F]{1,5})",
          "name": "constant.character.escape.canapea"
        },
        {
          "match": "\\^[A-Z@\\[\\]\\\\\\^_]",
          "name": "constant.character.escape.control.canapea"
        }
      ]
    },
    "top-level-value": {
      "match": "^[a-z][a-zA-Z0-9_]*\\b",
      "name": "entity.name.function.top-level.canapea"
    },
    "type-record": {
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.braces.begin"
        }
      },
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.braces.end"
        }
      },
      "name": "meta.function.type-record.canapea",
      "patterns": [
        {
          "match": "\\s+",
          "name": "punctuation.spaces.canapea"
        },
        {
          "match": "->",
          "name": "keyword.operator.arrow.canapea"
        },
        {
          "name": "meta.record.field.canapea",
          "match": "([a-z][a-zA-Z0-9_]*)\\s+(\\:)",
          "captures": {
            "1": {
              "name": "entity.name.record.field.canapea"
            },
            "2": {
              "name": "keyword.other.canapea"
            }
          }
        },
        {
          "match": "\\,",
          "name": "punctuation.separator.comma.canapea"
        },
        {
          "include": "#module-prefix"
        },
        {
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
          "name": "variable.type.canapea"
        },
        {
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
          "name": "storage.type.canapea"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#type-record"
        }
      ]
    },
    "type-signature": {
      "begin": "^([a-z_][a-zA-Z0-9_]*)\\s+(\\:)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.canapea"
        },
        "2": {
          "name": "keyword.other.colon.canapea"
        }
      },
      "end": "((^(?=[a-z]))|^$)",
      "name": "meta.function.type-declaration.canapea",
      "patterns": [
        {
          "include": "#type-signature-chunk"
        }
      ]
    },
    "type-signature-chunk": {
      "patterns": [
        {
          "match": "->",
          "name": "keyword.operator.arrow.canapea"
        },
        {
          "match": "\\s+",
          "name": "punctuation.spaces.canapea"
        },
        {
          "include": "#module-prefix"
        },
        {
          "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
          "name": "variable.type.canapea"
        },
        {
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
          "name": "storage.type.canapea"
        },
        {
          "match": "\\b(_)\\b",
          "name": "keyword.unused.canapea"
        },
        {
          "include": "#comma"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#type-record"
        }
      ]
    },
    "value": {
      "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
      "name": "meta.value.canapea"
    }
  }
}
