===
PTC0067: Smoketest: examples/basic.cnp
===

"""
# Documentation comment
"""
application

import capability "canapea::io"
  exposing
    | +StdOut
import capability "canapea::net"
  exposing
    | +NetRead

import "canapea::math" as math
import "canapea::task" as task
  exposing
    | Task

type Who =
  | Person String
  | World

type Color =
  | Red
  | Green
  | Blue
  | Custom String

type record Config =
  { name : String
  , backgroundColor : Color
  }

let add x =
  # TODO: `use math(+)` like Unison?
  x

let main : Sequence String -> Int64 { NetRead "https://anapioficeandfire.com/api/", StdOut }
let main args =
  let id = 583 # Jon Snow
  let requestJonSnow =
    http.get "https://anapioficeandfire.com/api/characters/${id}"
  let exitCode =
    task.attempt
      { run ->
        let raw = run requestJonSnow
        let json = run (raw |> codec.decode json.codec)
        when json is
          | Ok hero -> Ok
          | else -> Error
      }
  exitCode

---

(source_file
  (application_declaration
    (module_signature
      (toplevel_docs
        (multiline_string_literal
          (open_quote)
          (regular_string_part)
          (close_quote)))
      (application)
      (application_imports
        (import_capability_clause
          (import)
          (capability)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (import_capability_expose_list
            (exposing)
            (import_expose_capability
              (capability_name))))
        (import_capability_clause
          (import)
          (capability)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (import_capability_expose_list
            (exposing)
            (import_expose_capability
              (capability_name))))
        (import_clause
          (import)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (as)
          (named_module_import))
        (import_clause
          (import)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (as)
          (named_module_import)
          (import_expose_list
            (exposing)
            (import_expose_type
              (custom_type_name))))))
    (custom_type_declaration
      (type)
      (custom_type_name)
      (eq)
      (custom_type_constructor
        (custom_type_constructor_name)
        (custom_type_constructor_name))
      (custom_type_constructor
        (custom_type_constructor_name)))
    (custom_type_declaration
      (type)
      (custom_type_name)
      (eq)
      (custom_type_constructor
        (custom_type_constructor_name))
      (custom_type_constructor
        (custom_type_constructor_name))
      (custom_type_constructor
        (custom_type_constructor_name))
      (custom_type_constructor
        (custom_type_constructor_name)
        (custom_type_constructor_name)))
    (record_declaration
      (type)
      (record)
      (record_name)
      (eq)
      (record_type_expression
        (record_type_entry
          (simple_record_key)
          (colon)
          (custom_type_expression
            (custom_type_name)))
        (record_type_entry
          (simple_record_key)
          (colon)
          (custom_type_expression
            (custom_type_name)))))
    (function_declaration
      (let)
      (identifier)
      (function_parameter
        (identifier))
      (eq)
      (comment)
      (block
        (value_expression
          (identifier))))
    (function_declaration
      (type_annotation
        (let)
        (identifier))
      (let)
      (identifier)
      (function_parameter
        (identifier))
      (eq)
      (block
        (let_expression
          (let)
          (identifier)
          (eq)
          (block
            (value_expression
              (int_literal))))
        (comment)
        (let_expression
          (let)
          (identifier)
          (eq)
          (block
            (call_expression
              (identifier)
              (dot)
              (identifier)
              (call_parameter
                (value_expression
                  (string_literal))))))
        (let_expression
          (let)
          (identifier)
          (eq)
          (block
            (call_expression
              (identifier)
              (dot)
              (identifier)
              (call_parameter
                (anonymous_function_expression
                  (function_parameter
                    (identifier))
                  (arrow)
                  (block
                    (let_expression
                      (let)
                      (identifier)
                      (eq)
                      (block
                        (call_expression
                          (identifier)
                          (call_parameter
                            (value_expression
                              (identifier))))))
                    (let_expression
                      (let)
                      (identifier)
                      (eq)
                      (block
                        (call_expression
                          (identifier)
                          (call_parameter
                            (binary_pipe_expression
                              (value_expression
                                (identifier))
                              (pipe_operator)
                              (call_expression
                                (identifier)
                                (dot)
                                (identifier)
                                (call_parameter
                                  (qualified_function_ref_expression
                                    (identifier)
                                    (dot)
                                    (identifier)))))))))
                    (when_expression
                      (when)
                      (value_expression
                        (identifier))
                      (is)
                      (when_branch
                        (when_branch_pattern
                          (custom_type_pattern
                            (custom_type_constructor_name)
                            (identifier)))
                        (arrow)
                        (when_branch_consequence
                          (custom_type_value_expression
                            (custom_type_constructor_name))))
                      (when_branch_catchall
                        (else)
                        (arrow)
                        (when_branch_consequence
                          (custom_type_value_expression
                            (custom_type_constructor_name)))))))))))
        (value_expression
          (identifier))))))

===
PTC0076: (regression) Smoketest: minimal not working yet due to indentation
:skip
===

module

let main args =
  # FIXME: Still not working due to indentation
  let exitCode = task.attempt
    { 42 }

  # This works...
  let exitCode = task.attempt { 42 }

  # ...as does this
  let exitCode =
    task.attempt
      { 42 }

  exitCode

---
