===
PTC0001: Line comments
===

# Comment outside module

module

# Comment inside module

let f x = # Comment after function declaration
  # Comment in function body
  x # Comment after expression

# Comment after function

---

(source_file
  (comment)
  (module_declaration
    (module))
  (comment)
  (function_declaration
    (let)
    (identifier)
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    (comment)
    (comment)
    (value_expression
      (identifier))
    (implicit_block_close))
  (comment)
  (comment))

===
PTC0002: Toplevel doc comment
===

"""
# My Module

Documentation for the module itself
"""
module

"""
Function documentation
"""
let f x =
  x

---

(source_file
  (toplevel_docs
    (multiline_string_literal
      (open_quote)
      (regular_string_part)
      (close_quote)))
  (module_declaration
    (module))
  (toplevel_docs
    (multiline_string_literal
      (open_quote)
      (regular_string_part)
      (close_quote)))
  (function_declaration
    (let)
    (identifier)
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    (value_expression
      (identifier))
    (implicit_block_close)))

===
PTC0003: Inline test expectations while debugging and testing via `expect <condition>`
===

module

let constant = 3.14159

expect constant == 3.14159

let main _ =
  let x = 42
  # Also available as block-level assertion
  expect x == 42
  x

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    name: (identifier)
    (eq)
    (implicit_block_open)
    single_return: (decimal_literal)
    (implicit_block_close))
  expect: (test_expectation
    (expect)
    (conditional_expression
      left: (value_expression
        (identifier))
      (maths_operator)
      right: (decimal_literal)))
  (function_declaration
    (let)
    name: (identifier)
    (function_parameter
      (dont_care))
    (eq)
    (implicit_block_open)
    binding: (let_expression
      (let)
      name: (identifier)
      (eq)
      (implicit_block_open)
      single_return: (int_literal)
      (implicit_block_close))
    (comment)
    expect: (test_expectation
      (expect)
      (conditional_expression
        left: (value_expression
          (identifier))
        (maths_operator)
        right: (int_literal)))
    return: (value_expression
      (identifier))
    (implicit_block_close)))

===
PTC0080: Typed holes via `debug.todo <description>` during development
===

module

# While working on something you can use typed holes
let notImplemented _ =
  debug.todo "not implemented yet!"
  # It's good style to specify an actual todo but you can also ignore this
  # debug.todo _

---

(source_file
  (module_declaration
    (module))
  (comment)
  (function_declaration
    (let)
    (identifier)
    (function_parameter
      (dont_care))
    (eq)
    (implicit_block_open)
    (todo_expression
      (debug)
      (todo)
      (string_literal))
    (implicit_block_close))
  (comment)
  (comment))

===
PTC0081: Assertions via `assert <condition>`
===

module

let constant = 3.14159

# This might be a runtime check or help with optimization
assert constant == 3.14159

let main _ =
  # Also available as block-level assertion
  assert constant == 3.14159
  42

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (decimal_literal)
    (implicit_block_close))
  (comment)
  (local_assertion
    (assert)
    (conditional_expression
      (value_expression
        (identifier))
      (maths_operator)
      (decimal_literal)))
  (function_declaration
    (let)
    (identifier)
    (function_parameter
      (dont_care))
    (eq)
    (implicit_block_open)
    (comment)
    (local_assertion
      (assert)
      (conditional_expression
        (value_expression
          (identifier))
        (maths_operator)
        (decimal_literal)))
    (int_literal)
    (implicit_block_close)))

===
PTC0082: Invariant assertions via `assert.invariant`
===

module

let constant = 3.14159

# This might be a runtime check or help with optimization
assert.invariant constant == 3.14159

let main _ =
  # Also available as block-level assertion
  assert.invariant constant == 3.14159
  42

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (decimal_literal)
    (implicit_block_close))
  (comment)
  (invariant_assertion
    (assert)
    (invariant)
    (conditional_expression
      (value_expression
        (identifier))
      (maths_operator)
      (decimal_literal)))
  (function_declaration
    (let)
    (identifier)
    (function_parameter
      (dont_care))
    (eq)
    (implicit_block_open)
    (comment)
    (invariant_assertion
      (assert)
      (invariant)
      (conditional_expression
        (value_expression
          (identifier))
        (maths_operator)
        (decimal_literal)))
    (int_literal)
    (implicit_block_close)))

===
PTC0083: Unreachable assertions via `assert.unreachable` to mark unrecoverable states
===

module

# Not available at the top-level, what would that even mean?

# Only available as block-level assertion
let main _ =
  assert.unreachable
  let x = 42
  assert.unreachable


---

(source_file
  (module_declaration
    (module))
  (comment)
  (comment)
  (function_declaration
    (let)
    (identifier)
    (function_parameter
      (dont_care))
    (eq)
    (implicit_block_open)
    (unreachable_assertion
      (assert)
      (unreachable))
    (let_expression
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (int_literal)
      (implicit_block_close))
    (unreachable_assertion
      (assert)
      (unreachable))
    (implicit_block_close)))

===
PTC0004: Toplevel let binding to Int literal
===

module

let zero = 0
let answer = 42
let notTheAnswer = -42
let largeNumber = 1_000_000

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (int_literal)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (int_literal)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (int_literal)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (int_literal)
    (implicit_block_close)))

===
PTC0005: Toplevel let binding to String literal
===

module

let string = "this is a string"

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (string_literal)
    (implicit_block_close)))

===
PTC0006: Toplevel let binding to Decimal literal
===

module

let zero = 0.0
let answer = 42.0
let notTheAnswer = -42.0
let largeNumber = 543_210_987_654_321.123_456_789_012

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (decimal_literal)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (decimal_literal)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (decimal_literal)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (decimal_literal)
    (implicit_block_close)))

===
PTC0007: No negative int zeroes allowed
:error
===

module

let a = -0

---



===
PTC0008: TODO: Negative decimal zeroes is possible but should later be flagged as invalid
===

module

let a = -0.0

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (decimal_literal)
    (implicit_block_close)))

===
PTC0009: Toplevel let binding to record expression
===

module

let x =
  { key = "value"
  }

let y =
  { ...base
  , overriden = "record"
  , number = -1
  }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (record_expression
      (record_expression_entry
        (simple_record_key)
        (eq)
        (string_literal)))
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (record_expression
      (record_expression_splat
        (dotdotdot)
        (record_expression_splat_identifier))
      (record_expression_entry
        (simple_record_key)
        (eq)
        (string_literal))
      (record_expression_entry
        (simple_record_key)
        (eq)
        (int_literal)))
    (implicit_block_close)))

===
PTC0010: Toplevel let binding to sequence expression
===

module

let sequence =
  [ "some"
  , "sequence"
  ]

let splatted =
  [ ...splat
  , "some"
  , ...splaat
  , "sequence"
  , ...splaaat
  ]

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (sequence_expression
      (sequence_expression_entry
        (string_literal))
      (sequence_expression_entry
        (string_literal)))
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (sequence_expression
      (sequence_expression_entry
        (sequence_expression_splat
          (dotdotdot)
          (sequence_expression_splat_identifier)))
      (sequence_expression_entry
        (string_literal))
      (sequence_expression_entry
        (sequence_expression_splat
          (dotdotdot)
          (sequence_expression_splat_identifier)))
      (sequence_expression_entry
        (string_literal))
      (sequence_expression_entry
        (sequence_expression_splat
          (dotdotdot)
          (sequence_expression_splat_identifier))))
    (implicit_block_close)))

===
PTC0011: Simple when expression via top-level let binding
===

module

let a =
  when a is
    | 1 -> 2
    | 3.14159265 -> 3
    | _ -> 0

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (when_expression
      (when)
      (value_expression
        (identifier))
      (is)
      (when_branch
        (when_branch_pattern
          (int_literal))
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (int_literal)
          (implicit_block_close)))
      (when_branch
        (when_branch_pattern
          (decimal_literal))
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (int_literal)
          (implicit_block_close)))
      (when_branch_catchall
        (dont_care)
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (int_literal)
          (implicit_block_close))))
    (implicit_block_close)))

===
PTC0012: Complex when expression with guard via top-level let binding
===

module

let a =
  when x is
    | { m } where m == 1 -> m
    | [ _, n, ...rest ] where n == 2 -> rest
    | 3 -> x
    | Config key { path } [ _, Id id ] -> id
    | _ -> 0

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (when_expression
      (when)
      (value_expression
        (identifier))
      (is)
      (when_branch
        (when_branch_pattern
          (record_pattern
            (simple_record_key)))
        (where)
        (when_branch_pattern_guard
          (conditional_expression
            (value_expression
              (identifier))
            (maths_operator)
            (int_literal)))
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (value_expression
            (identifier))
          (implicit_block_close)))
      (when_branch
        (when_branch_pattern
          (sequence_pattern
            (dont_care)
            (identifier)
            (rest_args
              (dotdotdot)
              (rest_args_identifier))))
        (where)
        (when_branch_pattern_guard
          (conditional_expression
            (value_expression
              (identifier))
            (maths_operator)
            (int_literal)))
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (value_expression
            (identifier))
          (implicit_block_close)))
      (when_branch
        (when_branch_pattern
          (int_literal))
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (value_expression
            (identifier))
          (implicit_block_close)))
      (when_branch
        (when_branch_pattern
          (custom_type_pattern
            (custom_type_constructor_name)
            (identifier)
            (record_pattern
              (simple_record_key))
            (sequence_pattern
              (dont_care)
              (custom_type_pattern
                (custom_type_constructor_name)
                (identifier)))))
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (value_expression
            (identifier))
          (implicit_block_close)))
      (when_branch_catchall
        (dont_care)
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (int_literal)
          (implicit_block_close))))
    (implicit_block_close)))

===
PTC0013: (regression) When expression with complex consequences
===

module

let result =
  when a is
    | [1, "2", x, ...rest] ->
      when x is
        | 3 -> "OK"
        | _ -> 0
    | 42 -> { "the answer" }
    | { x, y } where x == 1 ->
      math.dot x y
    | _ ->
      { { x } y [z] ->
        let xx = x |> math.pow2
        let yy = math.pow2 y
        let z3 = z |> math.pow 3
        z3
      }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (when_expression
      (when)
      (value_expression
        (identifier))
      (is)
      (when_branch
        (when_branch_pattern
          (sequence_pattern
            (int_literal)
            (string_literal)
            (identifier)
            (rest_args
              (dotdotdot)
              (rest_args_identifier))))
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (when_expression
            (when)
            (value_expression
              (identifier))
            (is)
            (when_branch
              (when_branch_pattern
                (int_literal))
              (arrow)
              (when_branch_consequence
                (implicit_block_open)
                (string_literal)
                (implicit_block_close)))
            (when_branch_catchall
              (dont_care)
              (arrow)
              (when_branch_consequence
                (implicit_block_open)
                (int_literal)
                (implicit_block_close))))
          (implicit_block_close)))
      (when_branch
        (when_branch_pattern
          (int_literal))
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (anonymous_function_expression
            (string_literal))
          (implicit_block_close)))
      (when_branch
        (when_branch_pattern
          (record_pattern
            (simple_record_key)
            (simple_record_key)))
        (where)
        (when_branch_pattern_guard
          (conditional_expression
            (value_expression
              (identifier))
            (maths_operator)
            (int_literal)))
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (call_expression
            (call_target
              (value_expression
                (qualified_access_expression
                  (identifier)
                  (dot)
                  (identifier))))
            (call_parameter
              (value_expression
                (identifier)))
            (call_parameter
              (value_expression
                (identifier))))
          (implicit_block_close)))
      (when_branch_catchall
        (dont_care)
        (arrow)
        (when_branch_consequence
          (implicit_block_open)
          (anonymous_function_expression
            (function_parameter
              (record_pattern
                (simple_record_key)))
            (function_parameter
              (identifier))
            (function_parameter
              (sequence_pattern
                (identifier)))
            (arrow)
            (let_expression
              (let)
              (identifier)
              (eq)
              (implicit_block_open)
              (binary_operator_expression
                (value_expression
                  (identifier))
                (pipe_operator)
                (value_expression
                  (qualified_access_expression
                    (identifier)
                    (dot)
                    (identifier))))
              (implicit_block_close))
            (let_expression
              (let)
              (identifier)
              (eq)
              (implicit_block_open)
              (call_expression
                (call_target
                  (value_expression
                    (qualified_access_expression
                      (identifier)
                      (dot)
                      (identifier))))
                (call_parameter
                  (value_expression
                    (identifier))))
              (implicit_block_close))
            (let_expression
              (let)
              (identifier)
              (eq)
              (implicit_block_open)
              (binary_operator_expression
                (value_expression
                  (identifier))
                (pipe_operator)
                (call_expression
                  (call_target
                    (value_expression
                      (qualified_access_expression
                        (identifier)
                        (dot)
                        (identifier))))
                  (call_parameter
                    (int_literal))))
              (implicit_block_close))
            (value_expression
              (identifier)))
          (implicit_block_close))))
    (implicit_block_close)))

===
PTC0014: Simple call expression via top-level let binding
===

module

let a = fn "arg"

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (value_expression
          (identifier)))
      (call_parameter
        (string_literal)))
    (implicit_block_close)))

===
PTC0015: Simple call expression on qualified identifier via top-level let binding
===

module

let a = lib.fn "arg"

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (value_expression
          (qualified_access_expression
            (identifier)
            (dot)
            (identifier))))
      (call_parameter
        (string_literal)))
    (implicit_block_close)))

===
PTC0016: (regression) Simple call expression via top-level let binding
===

module

let a = math.add x y z zz

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (value_expression
          (qualified_access_expression
            (identifier)
            (dot)
            (identifier))))
      (call_parameter
        (value_expression
          (identifier)))
      (call_parameter
        (value_expression
          (identifier)))
      (call_parameter
        (value_expression
          (identifier)))
      (call_parameter
        (value_expression
          (identifier))))
    (implicit_block_close)))

===
PTC0017: Expressions surrounded in parens via top-level let binding
===

module

let int = (1)
let string = ("a string")
let funct = f (g 1 "blubb") (lib.compute { x = 42 })

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (parenL)
    (int_literal)
    (parenR)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (parenL)
    (string_literal)
    (parenR)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (value_expression
          (identifier)))
      (call_parameter
        (parenL)
        (call_expression
          (call_target
            (value_expression
              (identifier)))
          (call_parameter
            (int_literal))
          (call_parameter
            (string_literal)))
        (parenR))
      (call_parameter
        (parenL)
        (call_expression
          (call_target
            (value_expression
              (qualified_access_expression
                (identifier)
                (dot)
                (identifier))))
          (call_parameter
            (record_expression
              (record_expression_entry
                (simple_record_key)
                (eq)
                (int_literal)))))
        (parenR)))
    (implicit_block_close)))

===
PTC0018: (regression) More expressions surrounded in parens via top-level let binding
===

module

let int = (1)
let decimal1 = (1.0)
let string = ("a string")
let funct = f (g 1 "blubb") (lib.compute { x = 42 })

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (parenL)
    (int_literal)
    (parenR)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (parenL)
    (decimal_literal)
    (parenR)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (parenL)
    (string_literal)
    (parenR)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (value_expression
          (identifier)))
      (call_parameter
        (parenL)
        (call_expression
          (call_target
            (value_expression
              (identifier)))
          (call_parameter
            (int_literal))
          (call_parameter
            (string_literal)))
        (parenR))
      (call_parameter
        (parenL)
        (call_expression
          (call_target
            (value_expression
              (qualified_access_expression
                (identifier)
                (dot)
                (identifier))))
          (call_parameter
            (record_expression
              (record_expression_entry
                (simple_record_key)
                (eq)
                (int_literal)))))
        (parenR)))
    (implicit_block_close)))

===
PTC0019: (regression) Simple qualified call with anonymous function callback last
===

module

let x =
  task.attempt p1 p2
    { run ->
        "blubb"
    }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (value_expression
          (qualified_access_expression
            (identifier)
            (dot)
            (identifier))))
      (call_parameter
        (value_expression
          (identifier)))
      (call_parameter
        (value_expression
          (identifier)))
      (call_parameter
        (anonymous_function_expression
          (function_parameter
            (identifier))
          (arrow)
          (string_literal))))
    (implicit_block_close)))

===
PTC0020: (regression) Simple qualified call with single anonymous function callback parameter
===

module

let x =
  task.attempt
    { run ->
      "blubb"
    }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (value_expression
          (qualified_access_expression
            (identifier)
            (dot)
            (identifier))))
      (call_parameter
        (anonymous_function_expression
          (function_parameter
            (identifier))
          (arrow)
          (string_literal))))
    (implicit_block_close)))

===
PTC0021: (regression) Qualified call with anonymous function callback last inside a block with other bindings
===

module

let main args =
  let request = http.get "http://example.org/"
  let result =
    task.attempt
      { run ->
        "blubb"
      }
  result

---

(source_file
  (module_declaration
    (module))
  (function_declaration
    (let)
    name: (identifier)
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    binding: (let_expression
      (let)
      name: (identifier)
      (eq)
      (implicit_block_open)
      single_return: (call_expression
        (call_target
          (value_expression
            (qualified_access_expression
              target: (identifier)
              (dot)
              segment: (identifier))))
        (call_parameter
          (string_literal)))
      (implicit_block_close))
    binding: (let_expression
      (let)
      name: (identifier)
      (eq)
      (implicit_block_open)
      single_return: (call_expression
        (call_target
          (value_expression
            (qualified_access_expression
              target: (identifier)
              (dot)
              segment: (identifier))))
        (call_parameter
          (anonymous_function_expression
            (function_parameter
              (identifier))
            (arrow)
            single_return: (string_literal))))
      (implicit_block_close))
    return: (value_expression
      (identifier))
    (implicit_block_close)))

===
PTC0022: Trivial custom type value via top-level let binding
===

module

let value = Id

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (custom_type_trivial_value_expression)
    (implicit_block_close)))

===
PTC0023: (regression) Instantiate custom type by calling its constructor
===

module

type Id =
  | Id Int

let id =
  Id 42

---

(source_file
  (module_declaration
    (module))
  (custom_type_declaration
    (type)
    (custom_type_constructor_name)
    (eq)
    (custom_type_constructor
      (custom_type_constructor_name)
      (uppercase_identifier)))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (custom_type_trivial_value_expression))
      (call_parameter
        (int_literal)))
    (implicit_block_close)))

===
PTC0024: (regression) Instantiate custom type multiple times by calling its constructors
===

module

type Id =
  | Unset
  | StringId String
  | IntId Int

let u = Unset
let s = StringId "db-01"
let i = IntId 42

---

(source_file
  (module_declaration
    (module))
  (custom_type_declaration
    (type)
    (custom_type_constructor_name)
    (eq)
    (custom_type_constructor
      (custom_type_constructor_name))
    (custom_type_constructor
      (custom_type_constructor_name)
      (uppercase_identifier))
    (custom_type_constructor
      (custom_type_constructor_name)
      (uppercase_identifier)))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (custom_type_trivial_value_expression)
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (custom_type_trivial_value_expression))
      (call_parameter
        (string_literal)))
    (implicit_block_close))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (call_target
        (custom_type_trivial_value_expression))
      (call_parameter
        (int_literal)))
    (implicit_block_close)))

===
PTC0077: Multiline strings as expressions via top-level let binding
===

module

let multi =
  """
  This is a multiline string as a value
  """

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (multiline_string_literal
      (open_quote)
      (regular_string_part)
      (close_quote))
    (implicit_block_close)))

===
PTC0079: Multiline strings as expressions via top-level let binding with language id
===

module

let multi =
  """markdown
  This is a multiline string explicitly annotated as Markdown
  """

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    name: (identifier)
    (eq)
    (implicit_block_open)
    single_return: (multiline_string_literal
      (open_quote)
      (regular_string_part)
      (close_quote))
    (implicit_block_close)))
