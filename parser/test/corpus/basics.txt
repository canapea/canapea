===
PTC0001: Line comments
===

# Comment outside module

module

# Comment inside module

let f x = # Comment after function declaration
  # Comment in function body
  x # Comment after expression

# Comment after function

---

(source_file
  (comment)
  (module_declaration
    (module_signature
      (module))
    (comment)
    (function_declaration
      (let)
      name: (identifier)
      (function_parameter
        name: (identifier))
      (eq)
      (implicit_block_open)
      (comment)
      (comment)
      single_return: (value_expression
        (identifier))
      (implicit_block_close)))
    (comment)
    (comment))

===
PTC0002: Toplevel doc comment
===

"""
# My Module

Documentation for the module itself
"""
module

"""
Function documentation
"""
let f x =
  x

---

(source_file
  (module_declaration
    (module_signature
      (toplevel_docs
        (multiline_string_literal
          (open_quote)
          (regular_string_part)
          (close_quote)))
      (module))
    (toplevel_docs
      (multiline_string_literal
        (open_quote)
        (regular_string_part)
        (close_quote)))
    (function_declaration
      (let)
      (identifier)
      (function_parameter
        (identifier))
      (eq)
      (implicit_block_open)
      (value_expression
        (identifier))
      (implicit_block_close))))

===
PTC0003: Inline test expectations while debugging and testing via `expect <condition>`
===

module

let constant = 3.14159

expect constant == 3.14159

let main _ =
  let x = 42
  # Also available as block-level assertion
  expect x == 42
  x

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      name: (identifier)
      (eq)
      (implicit_block_open)
      single_return: (value_expression
        (decimal_literal))
      (implicit_block_close))
    expect: (test_expectation
      (expect)
      (conditional_expression
        left: (value_expression
          (identifier))
        op: (boolean_operator)
        right: (value_expression
          (decimal_literal))))
    (function_declaration
      (let)
      name: (identifier)
      (function_parameter
        (dont_care))
      (eq)
      (implicit_block_open)
      binding: (let_expression
        (let)
        name: (identifier)
        (eq)
        (implicit_block_open)
        single_return: (value_expression
          (int_literal))
        (implicit_block_close))
      (comment)
      expect: (test_expectation
        (expect)
        (conditional_expression
          left: (value_expression
            (identifier))
          op: (boolean_operator)
          right: (value_expression
            (int_literal))))
      return: (value_expression
        (identifier))
      (implicit_block_close))))

===
PTC0080: Typed holes via `debug.todo <description>` during development
===

module

# While working on something you can use typed holes
let notImplemented _ =
  debug.todo "not implemented yet!"
  # It's good style to specify an actual todo but you can also ignore this
  # debug.todo _

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (comment)
    (function_declaration
      (let)
      (identifier)
      (function_parameter
        (dont_care))
      (eq)
      (implicit_block_open)
      (todo_expression
        (debug_todo)
        (string_literal))
      (implicit_block_close)))
    (comment)
    (comment))

===
PTC0083: `livedoc` living documentation via `debug{.stash}?` blocks during development
===

module

let const = 3.14159

# You can keep code around that still gets checked and refactored
# but doesn't get executed unless you remove the marker
let demoLivedoc _ =
  debug
    # Without a marker this code runs in debug mode
    expect const == 3.14159
    expect 0.1 + 0.2 == 0.3

  debug.stash
    # Stashing this block disables it for later usage but it is
    # type checked and partakes in refactoring, it just doesn't run
    expect 1 == 1

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (decimal_literal))
      (implicit_block_close))
    (comment)
    (comment)
    (function_declaration
      (let)
      (identifier)
      (function_parameter
        (dont_care))
      (eq)
      (implicit_block_open)
      (livedoc_expression
        (debug)
        (implicit_block_open)
        (comment)
        (test_expectation
          (expect)
          (conditional_expression
            (value_expression
              (identifier))
            (boolean_operator)
            (value_expression
              (decimal_literal))))
        (test_expectation
          (expect)
          (conditional_expression
            (binary_operator_expression
              (value_expression
                (decimal_literal))
              (maths_operator)
              (value_expression
                (decimal_literal)))
            (boolean_operator)
            (value_expression
              (decimal_literal))))
        (implicit_block_close))
      (livedoc_expression
        (debug_stash)
        (implicit_block_open)
        (comment)
        (comment)
        (test_expectation
          (expect)
          (conditional_expression
            (value_expression
              (int_literal))
            (boolean_operator)
            (value_expression
              (int_literal))))
        (implicit_block_close))
      (implicit_block_close))))

===
PTC0004: Toplevel let binding to Int literal
===

module

let zero = 0
let answer = 42
let notTheAnswer = -42
let largeNumber = 1_000_000
let oneBillion = 1e9

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (int_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (int_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (int_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (int_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (int_literal))
      (implicit_block_close))))

===
PTC0005: Toplevel let binding to String literal
===

module

let string = "this is a string"

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (string_literal))
      (implicit_block_close))))

===
PTC0006: Toplevel let binding to Decimal literal
===

module

let zero = 0.0
let answer = 42.0
let notTheAnswer = -42.0
let largeNumber = 543_210_987_654_321.123_456_789_012
let eightBillion = 8.0e9

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (decimal_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (decimal_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (decimal_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (decimal_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (decimal_literal))
      (implicit_block_close))))

===
PTC0007: No negative int zeroes allowed
:error
===

module

let a = -0

---



===
PTC0008: TODO: Negative decimal zeroes is possible but should later be flagged as invalid
===

module

let a = -0.0

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (decimal_literal))
      (implicit_block_close))))

===
PTC0009: Toplevel let binding to record expression
===

module

let empty = {}

let x =
  { key = "value"
  }

let y =
  { ...base
  , overriden = "record"
  , number = -1
  }

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (record_expression)
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (record_expression
        (record_expression_entry
          (simple_record_key)
          (eq)
          (value_expression
            (string_literal))))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (record_expression
        (record_expression_splat
          (identifier))
        (record_expression_entry
          (simple_record_key)
          (eq)
          (value_expression
            (string_literal)))
        (record_expression_entry
          (simple_record_key)
          (eq)
          (value_expression
            (int_literal))))
      (implicit_block_close))))

===
PTC0010: Toplevel let binding to sequence expression
===

module

let sequence =
  [ "some"
  , "sequence"
  ]

let splatted =
  [ ...splat
  , "some"
  , ...splaat
  , "sequence"
  , ...splaaat
  ]

---

(source_file
  (module_declaration
    (module_signature
      (module))
  (let_declaration
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (sequence_expression
      (sequence_expression_entry
        (value_expression
          (string_literal)))
      (sequence_expression_entry
        (value_expression
          (string_literal))))
    (implicit_block_close))
  (let_declaration
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (sequence_expression
      (sequence_expression_entry
        (sequence_expression_splat
          (identifier)))
      (sequence_expression_entry
        (value_expression
          (string_literal)))
      (sequence_expression_entry
        (sequence_expression_splat
          (identifier)))
      (sequence_expression_entry
        (value_expression
          (string_literal)))
      (sequence_expression_entry
        (sequence_expression_splat
          (identifier))))
    (implicit_block_close))))

===
PTC0011: Simple when expression via top-level let binding
===

module

let a =
  when a is
    | 1 -> 2
    | 3.14159265 -> 3
    | else -> 0

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (when_expression
        (when)
        (value_expression
          (identifier))
        (is)
        (when_branch
          (when_branch_pattern
            (int_literal))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (value_expression
              (int_literal))
            (implicit_block_close)))
        (when_branch
          (when_branch_pattern
            (decimal_literal))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (value_expression
              (int_literal))
            (implicit_block_close)))
        (when_branch_catchall
          (else)
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (value_expression
              (int_literal))
            (implicit_block_close))))
      (implicit_block_close))))

===
PTC0012: Complex when expression with guard via top-level let binding
===

module

let a =
  when x is
    | { m } where m == 1 -> m
    | [ _, n, ...rest ] where n == 2 -> rest
    | 3 -> x
    | Config key { path } [ _, Id id ] -> id
    | else value -> value

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (when_expression
        (when)
        (value_expression
          (identifier))
        (is)
        (when_branch
          (when_branch_pattern
            (record_pattern
              (simple_record_key)))
          (where)
          (when_branch_pattern_guard
            (conditional_expression
              (value_expression
                (identifier))
              (boolean_operator)
              (value_expression
                (int_literal))))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (value_expression
              (identifier))
            (implicit_block_close)))
        (when_branch
          (when_branch_pattern
            (sequence_pattern
              (dont_care)
              (identifier)
              (rest_args
                (identifier))))
          (where)
          (when_branch_pattern_guard
            (conditional_expression
              (value_expression
                (identifier))
              (boolean_operator)
              (value_expression
                (int_literal))))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (value_expression
              (identifier))
            (implicit_block_close)))
        (when_branch
          (when_branch_pattern
            (int_literal))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (value_expression
              (identifier))
            (implicit_block_close)))
        (when_branch
          (when_branch_pattern
            (custom_type_pattern
              (custom_type_constructor_name)
              (identifier)
              (record_pattern
                (simple_record_key))
              (sequence_pattern
                (dont_care)
                (custom_type_pattern
                  (custom_type_constructor_name)
                  (identifier)))))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (value_expression
              (identifier))
            (implicit_block_close)))
        (when_branch_catchall
          (else)
          (identifier)
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (value_expression
              (identifier))
            (implicit_block_close))))
      (implicit_block_close))))

===
PTC0013: (regression) When expression with complex consequences
===

module

let result =
  when a is
    | [1, "2", x, ...rest] ->
      when x is
        | 3 -> "OK"
        | else value -> value
    | 42 -> { "the answer" }
    | { x, y } where x == 1 ->
      math.dot x y
    | else ->
      { { x } y [z] ->
        let xx = x |> math.pow2
        let yy = math.pow2 y
        let z3 = z |> math.pow 3
        z3
      }

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      name: (identifier)
      (eq)
      (implicit_block_open)
      single_return: (when_expression
        (when)
        subject: (value_expression
          (identifier))
        (is)
        (when_branch
          (when_branch_pattern
            (sequence_pattern
              (int_literal)
              (string_literal)
              (identifier)
              (rest_args
                (identifier))))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (when_expression
              (when)
              subject: (value_expression
                (identifier))
              (is)
              (when_branch
                (when_branch_pattern
                  (int_literal))
                (arrow)
                (when_branch_consequence
                  (implicit_block_open)
                  (value_expression
                    (string_literal))
                  (implicit_block_close)))
              (when_branch_catchall
                (else)
                (identifier)
                (arrow)
                (when_branch_consequence
                  (implicit_block_open)
                  (value_expression
                    (identifier))
                  (implicit_block_close))))
            (implicit_block_close)))
        (when_branch
          (when_branch_pattern
            (int_literal))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (anonymous_function_expression
              single_return: (value_expression
                (string_literal)))
            (implicit_block_close)))
        (when_branch
          (when_branch_pattern
            (record_pattern
              (simple_record_key)
              (simple_record_key)))
          (where)
          (when_branch_pattern_guard
            (conditional_expression
              left: (value_expression
                (identifier))
              op: (boolean_operator)
              right: (value_expression
                (int_literal))))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (call_expression
              qualified: (identifier)
              (dot)
              target: (identifier)
              parameter: (call_parameter
                (value_expression
                  (identifier)))
              parameter: (call_parameter
                (value_expression
                  (identifier))))
            (implicit_block_close)))
        (when_branch_catchall
          (else)
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (anonymous_function_expression
              (function_parameter
                (record_pattern
                  (simple_record_key)))
              (function_parameter
                name: (identifier))
              (function_parameter
                (sequence_pattern
                  (identifier)))
              (arrow)
              binding: (let_expression
                (let)
                name: (identifier)
                (eq)
                (implicit_block_open)
                single_return: (binary_pipe_expression
                  (value_expression
                    (identifier))
                  (pipe_operator)
                  (qualified_function_ref_expression
                    qualified: (identifier)
                    (dot)
                    target: (identifier)))
                (implicit_block_close))
              binding: (let_expression
                (let)
                name: (identifier)
                (eq)
                (implicit_block_open)
                single_return: (call_expression
                  qualified: (identifier)
                  (dot)
                  target: (identifier)
                  parameter: (call_parameter
                    (value_expression
                      (identifier))))
                (implicit_block_close))
              binding: (let_expression
                (let)
                name: (identifier)
                (eq)
                (implicit_block_open)
                single_return: (binary_pipe_expression
                  (value_expression
                    (identifier))
                  (pipe_operator)
                  (call_expression
                    qualified: (identifier)
                    (dot)
                    target: (identifier)
                    parameter: (call_parameter
                      (value_expression
                        (int_literal)))))
                (implicit_block_close))
              return: (value_expression
                (identifier)))
            (implicit_block_close))))
      (implicit_block_close))))

===
PTC0014: Simple call expression via top-level let binding
===

module

let a = fn "arg"

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (call_expression
        (identifier)
        (call_parameter
          (value_expression
            (string_literal))))
      (implicit_block_close))))

===
PTC0015: Simple call expression on qualified identifier via top-level let binding
===

module

let a = lib.fn "arg"

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (call_expression
        (identifier)
        (dot)
        (identifier)
        (call_parameter
          (value_expression
            (string_literal))))
      (implicit_block_close))))

===
PTC0016: (regression) Simple call expression via top-level let binding
===

module

let a = math.add x y z zz

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (call_expression
        (identifier)
        (dot)
        (identifier)
        (call_parameter
          (value_expression
            (identifier)))
        (call_parameter
          (value_expression
            (identifier)))
        (call_parameter
          (value_expression
            (identifier)))
        (call_parameter
          (value_expression
            (identifier))))
      (implicit_block_close))))

===
PTC0017: Expressions surrounded in parens via top-level let binding
===

module

let int = (1)
let string = ("a string")
let funct = f (g 1 "blubb") (lib.compute { x = 42 })

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      name: (identifier)
      (eq)
      (implicit_block_open)
      single_return: (value_expression
        (int_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      name: (identifier)
      (eq)
      (implicit_block_open)
      single_return: (value_expression
        (string_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      name: (identifier)
      (eq)
      (implicit_block_open)
      single_return: (call_expression
        immediate_target: (identifier)
        parameter: (call_parameter
          (call_expression
            immediate_target: (identifier)
            parameter: (call_parameter
              (value_expression
                (int_literal)))
            parameter: (call_parameter
              (value_expression
                (string_literal)))))
        parameter: (call_parameter
          (call_expression
            qualified: (identifier)
            (dot)
            target: (identifier)
            parameter: (call_parameter
              (record_expression
                (record_expression_entry
                  key: (simple_record_key)
                  (eq)
                  value: (value_expression
                    (int_literal))))))))
      (implicit_block_close))))

===
PTC0018: (regression) More expressions surrounded in parens via top-level let binding
===

module

let int = (1)
let decimal1 = (1.0)
let string = ("a string")
let funct = f (g 1 "blubb") (lib.compute { x = 42 })

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (int_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (decimal_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (string_literal))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (call_expression
        (identifier)
        (call_parameter
          (call_expression
            (identifier)
            (call_parameter
              (value_expression
                (int_literal)))
            (call_parameter
              (value_expression
                (string_literal)))))
        (call_parameter
          (call_expression
            (identifier)
            (dot)
            (identifier)
            (call_parameter
              (record_expression
                (record_expression_entry
                  (simple_record_key)
                  (eq)
                  (value_expression
                    (int_literal))))))))
      (implicit_block_close))))

===
PTC0019: (regression) Simple qualified call with anonymous function callback last
===

module

let x =
  task.attempt p1 p2
    { run ->
        "blubb"
    }

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (call_expression
        (identifier)
        (dot)
        (identifier)
        (call_parameter
          (value_expression
            (identifier)))
        (call_parameter
          (value_expression
            (identifier)))
        (call_parameter
          (anonymous_function_expression
            (function_parameter
              (identifier))
            (arrow)
            (value_expression
              (string_literal)))))
      (implicit_block_close))))

===
PTC0020: (regression) Simple qualified call with single anonymous function callback parameter
===

module

let x =
  task.attempt
    { run ->
      "blubb"
    }

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (call_expression
        (identifier)
        (dot)
        (identifier)
        (call_parameter
          (anonymous_function_expression
            (function_parameter
              (identifier))
            (arrow)
            (value_expression
              (string_literal)))))
      (implicit_block_close))))

===
PTC0021: (regression) Qualified call with anonymous function callback last inside a block with other bindings
===

module

let main args =
  let request = http.get "http://example.org/"
  let result =
    task.attempt
      { run ->
        "blubb"
      }
  result

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (function_declaration
      (let)
      name: (identifier)
      (function_parameter
        name: (identifier))
      (eq)
      (implicit_block_open)
      binding: (let_expression
        (let)
        name: (identifier)
        (eq)
        (implicit_block_open)
        single_return: (call_expression
          qualified: (identifier)
          (dot)
          target: (identifier)
          parameter: (call_parameter
            (value_expression
              (string_literal))))
        (implicit_block_close))
      binding: (let_expression
        (let)
        name: (identifier)
        (eq)
        (implicit_block_open)
        single_return: (call_expression
          qualified: (identifier)
          (dot)
          target: (identifier)
          parameter: (call_parameter
            (anonymous_function_expression
              (function_parameter
                name: (identifier))
              (arrow)
              single_return: (value_expression
                (string_literal)))))
        (implicit_block_close))
      return: (value_expression
        (identifier))
      (implicit_block_close))))

===
PTC0022: Trivial custom type value via top-level let binding
===

module

let value = Id

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (custom_type_value_expression
        (custom_type_constructor_name))
      (implicit_block_close))))

===
PTC0023: (regression) Instantiate custom type by calling its constructor
===

module

type Id =
  | Id Int

let id =
  Id 42

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (custom_type_declaration
      (type)
      (custom_type_name)
      (eq)
      (custom_type_constructor
        (custom_type_constructor_name)
        (custom_type_constructor_name)))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (custom_type_value_expression
        (custom_type_constructor_name)
        (call_parameter
          (value_expression
            (int_literal))))
      (implicit_block_close))))

===
PTC0024: (regression) Instantiate custom type multiple times by calling its constructors
===

module

type Id =
  | Unset
  | StringId String
  | IntId Int

let u = Unset
let s = StringId "db-01"
let i = IntId 42

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (custom_type_declaration
      (type)
      (custom_type_name)
      (eq)
      (custom_type_constructor
        (custom_type_constructor_name))
      (custom_type_constructor
        (custom_type_constructor_name)
        (custom_type_constructor_name))
      (custom_type_constructor
        (custom_type_constructor_name)
        (custom_type_constructor_name)))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (custom_type_value_expression
        (custom_type_constructor_name))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (custom_type_value_expression
        (custom_type_constructor_name)
        (call_parameter
          (value_expression
            (string_literal))))
      (implicit_block_close))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (custom_type_value_expression
        (custom_type_constructor_name)
        (call_parameter
          (value_expression
            (int_literal))))
      (implicit_block_close))))

===
PTC0077: Multiline strings as expressions via top-level let binding
===

module

let multi =
  """
  This is a multiline string as a value
  """

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (value_expression
        (multiline_string_literal
          (open_quote)
          (regular_string_part)
          (close_quote)))
      (implicit_block_close))))

===
PTC0079: Multiline strings as expressions via top-level let binding with language id
===

module

let multi =
  """markdown
  This is a multiline string explicitly annotated as Markdown
  """

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      name: (identifier)
      (eq)
      (implicit_block_open)
      single_return: (value_expression
        (multiline_string_literal
          (open_quote)
          (regular_string_part)
          (close_quote)))
      (implicit_block_close))))

===
PTC0082: `let` expression opens a block and the last expression is its final value
===

module

let multi =
  let x = 42
  let y = mult 3 4
  x + y

let mult a b =
  a * b

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (let_expression
        (let)
        (identifier)
        (eq)
        (implicit_block_open)
        (value_expression
          (int_literal))
        (implicit_block_close))
      (let_expression
        (let)
        (identifier)
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (call_parameter
            (value_expression
              (int_literal)))
          (call_parameter
            (value_expression
              (int_literal))))
        (implicit_block_close))
      (binary_operator_expression
        (value_expression
          (identifier))
        (maths_operator)
        (value_expression
          (identifier)))
      (implicit_block_close))
    (function_declaration
      (let)
      (identifier)
      (function_parameter
        (identifier))
      (function_parameter
        (identifier))
      (eq)
      (implicit_block_open)
      (binary_operator_expression
        (value_expression
          (identifier))
        (maths_operator)
        (value_expression
          (identifier)))
      (implicit_block_close))))

===
PTC0084: Pattern matching in `let` expression bindings
===

module

let block =
  # Destructuring objects
  let { x, y, z } = { x = "x", y = "y", z = ""}

  # Destructuring sequences
  let [one, ...rest] = [1, 2, 3, 4]

  # Destructuring simple custom types with exactly one constructor
  let (Id s) = Id "raw-id-for-answer"

  # Destructuring complex custom types with exactly one constructor
  let (Id s id [fst]) = Id "raw-id-for-answer" 42 [1,2,3]

  # Destructuring even more complex custom types with exactly one constructor
  let (Id s id [fst] {meta}) = Id "raw-id-for-answer" 42 [1,2,3] {meta="data"}

  s

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (implicit_block_open)
      (comment)
      (let_expression
        (let)
        (record_pattern
          (simple_record_key)
          (simple_record_key)
          (simple_record_key))
        (eq)
        (implicit_block_open)
        (record_expression
          (record_expression_entry
            (simple_record_key)
            (eq)
            (value_expression
              (string_literal)))
          (record_expression_entry
            (simple_record_key)
            (eq)
            (value_expression
              (string_literal)))
          (record_expression_entry
            (simple_record_key)
            (eq)
            (value_expression
              (string_literal))))
        (implicit_block_close))
      (comment)
      (let_expression
        (let)
        (sequence_pattern
          (identifier)
          (rest_args
            (identifier)))
        (eq)
        (implicit_block_open)
        (sequence_expression
          (sequence_expression_entry
            (value_expression
              (int_literal)))
          (sequence_expression_entry
            (value_expression
              (int_literal)))
          (sequence_expression_entry
            (value_expression
              (int_literal)))
          (sequence_expression_entry
            (value_expression
              (int_literal))))
        (implicit_block_close))
      (comment)
      (let_expression
        (let)
        (custom_type_pattern
          (custom_type_constructor_name)
          (identifier))
        (eq)
        (implicit_block_open)
        (custom_type_value_expression
          (custom_type_constructor_name)
          (call_parameter
            (value_expression
              (string_literal))))
        (implicit_block_close))
      (comment)
      (let_expression
        (let)
        (custom_type_pattern
          (custom_type_constructor_name)
          (identifier)
          (identifier)
          (sequence_pattern
            (identifier)))
        (eq)
        (implicit_block_open)
        (custom_type_value_expression
          (custom_type_constructor_name)
          (call_parameter
            (value_expression
              (string_literal)))
          (call_parameter
            (value_expression
              (int_literal)))
          (call_parameter
            (sequence_expression
              (sequence_expression_entry
                (value_expression
                  (int_literal)))
              (sequence_expression_entry
                (value_expression
                  (int_literal)))
              (sequence_expression_entry
                (value_expression
                  (int_literal))))))
        (implicit_block_close))
      (comment)
      (let_expression
        (let)
        (custom_type_pattern
          (custom_type_constructor_name)
          (identifier)
          (identifier)
          (sequence_pattern
            (identifier))
          (record_pattern
            (simple_record_key)))
        (eq)
        (implicit_block_open)
        (custom_type_value_expression
          (custom_type_constructor_name)
          (call_parameter
            (value_expression
              (string_literal)))
          (call_parameter
            (value_expression
              (int_literal)))
          (call_parameter
            (sequence_expression
              (sequence_expression_entry
                (value_expression
                  (int_literal)))
              (sequence_expression_entry
                (value_expression
                  (int_literal)))
              (sequence_expression_entry
                (value_expression
                  (int_literal)))))
          (call_parameter
            (record_expression
              (record_expression_entry
                (simple_record_key)
                (eq)
                (value_expression
                  (string_literal))))))
        (implicit_block_close))
      (value_expression
        (identifier))
      (implicit_block_close))))

===
PTC0087: Records don't allow anonymous functions as direct values
:error
===

module

let objecty =
  { fn = { x -> x + x }
  }

---

===
PTC0092: FIXME (regression) Record fields can be accessed via "train wrecks"
:skip
===

module

type TrainState =
  | Fine
  | Wrecked

let train =
  { car =
    { break =
      { actuate = Wrecked
      }
    }
  }

expect train.car.break.actuate == Wrecked

---
