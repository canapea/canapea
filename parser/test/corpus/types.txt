===
PTC0068: FIXME: Standalone type annotation without implementation is ignored for now
===

module

# Ignored for now but it's nice to have them available
let main : Sequence String -> { NetRead, Stdout }
let main = todo ""

---

(source_file
  (module_declaration
    (module))
  (comment)
  (let_expression
    (type_annotation
      (let)
      (identifier))
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (call_expression
      (identifier)
      (call_parameter
        (string_literal)))
    (implicit_block_close)))

===
PTC0069: Basic type concept exposing one function
===

module "canapea/lang"

type concept Rate a =
  let rate : a -> String

  exposing
    let thumbsUp x =
      rate x

---

(source_file
  (development_module_declaration
    (module)
    (canapea)
    (pathSep)
    (module_name_path_fragment))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_concept_implementation
      (exposing)
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0070: Basic type concept exposing one operator
===

module "canapea/lang"

type concept Add a =
  let add : a, a -> a

  exposing
    operator (+) : a, a -> a
    operator (+) x y =
      add x y

---

(source_file
  (development_module_declaration
    (module)
    (canapea)
    (pathSep)
    (module_name_path_fragment))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_concept_implementation
      (exposing)
      (binary_operator_declaration
        (operator_type_annotation
          (operator)
          (maths_operator))
        (operator)
        (maths_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0071: Realistic type concept providing one default implementation and exposing two operators
===

module "canapea/lang"

type concept Eq a =
  let equals : a, a -> Truthy

  exposing
    let not x =
      when x is
        | Truthy -> Falsy
        | else -> Truthy

    operator (==) x y =
      equals x y

    operator (/=) x y =
      not (equals x y)

---

(source_file
  (development_module_declaration
    (module)
    (canapea)
    (pathSep)
    (module_name_path_fragment))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_concept_implementation
      (exposing)
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (when_expression
          (when)
          (value_expression
            (identifier))
          (is)
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close)))
          (when_branch_catchall
            (else)
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close))))
        (implicit_block_close))
      (binary_operator_declaration
        (operator)
        (boolean_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close))
      (binary_operator_declaration
        (operator)
        (boolean_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (call_parameter
            (call_expression
              (identifier)
              (call_parameter
                (value_expression
                  (identifier)))
              (call_parameter
                (value_expression
                  (identifier))))))
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0072: Realistic type concept instance to provide implementation for a type
===

module "canapea/lang"

type concept instance Eq Decimal =
  let equals x y =
    decimal.equals x y

---

(source_file
  (development_module_declaration
    (module)
    (canapea)
    (pathSep)
    (module_name_path_fragment))
  (type_concept_instance_declaration
    (type)
    (concept)
    (instance)
    (type_concept_name)
    (custom_type_expression
      (custom_type_name))
    (eq)
    (implicit_block_open)
    (type_concept_instance_implementation
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (dot)
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0073: Realistic type constructor concept providing one default implementation
===

module "canapea/lang"
  exposing
    | Truthy
    | Falsy
    | Truthiness # Constructors not exposed!

type Truthiness =
  | IsTruthy
  | IsFalsy

type constructor concept Truthy k =
  let isTruthy : k -> Truthiness

  exposing
    let isFalsy x =
      when isTruthy x is
        | IsTruthy -> IsFalsy
        | else -> IsTruthy

type constructor concept Falsy k =
  let isFalsy : k -> Truthiness

  exposing
    let isTruthy x =
      when isFalsy x is
        | IsFalsy -> IsTruthy
        | else -> IsTruthy

---

(source_file
  (development_module_declaration
    (module)
    (canapea)
    (pathSep)
    (module_name_path_fragment)
    (module_export_list
      (exposing)
      (module_export_opaque_type
        (custom_type_name))
      (module_export_opaque_type
        (custom_type_name))
      (module_export_opaque_type
        (custom_type_name))))
  (comment)
  (custom_type_declaration
    (type)
    (custom_type_name)
    (eq)
    (custom_type_constructor
      (custom_type_constructor_name))
    (custom_type_constructor
      (custom_type_constructor_name)))
  (type_constructor_concept_declaration
    (type)
    (constructor)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_constructor_concept_implementation
      (exposing)
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (when_expression
          (when)
          (call_expression
            (identifier)
            (call_parameter
              (value_expression
                (identifier))))
          (is)
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close)))
          (when_branch_catchall
            (else)
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close))))
        (implicit_block_close)))
    (implicit_block_close))
  (type_constructor_concept_declaration
    (type)
    (constructor)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_constructor_concept_implementation
      (exposing)
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (when_expression
          (when)
          (call_expression
            (identifier)
            (call_parameter
              (value_expression
                (identifier))))
          (is)
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close)))
          (when_branch_catchall
            (else)
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close))))
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0074: Realistic type concept for natural numbers
===

module "canapea/number"
  exposing
    | Natural

type concept Natural a =
  # TODO: At least for checking the laws Eq is implied, is that part of Nat?
  # where [ Eq a ]

  let add : a, a -> a
  let subtract : a, a -> a
  let multiply : a, a -> a
  let one : a
  let zero : a

  exposing
    operator (+) : a, a -> a
    operator (+) x y =
      add x y

    operator (-) : a, a -> a
    operator (-) x y =
      subtract x y

    operator (*) : a, a -> a
    operator (*) x y =
      multiply x y

  # # TODO: type concept contracts?
  # contract x y =
  #   expect (zero * x) == zero
  #   expect (x * zero) == zero
  #   expect (zero + x) == x
  #   expect (x + zero) == x
  #   expect (one * x) == x
  #   expect (x * one) == x
  #   expect (x + one) == (one + x)

type concept instance Natural Int =
  let add x y =
    int.add x y

  let subtract x y =
    int.subtract x y

  let multiply x y =
    int.multiply x y

  let one = 1
  let zero = 0

---

(source_file
  (development_module_declaration
    (module)
    (canapea)
    (pathSep)
    (module_name_path_fragment)
    (module_export_list
      (exposing)
      (module_export_opaque_type
        (custom_type_name))))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (comment)
    (comment)
    (type_concept_requirements
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier)))
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier)))
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier)))
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier)))
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_concept_implementation
      (exposing)
      (binary_operator_declaration
        (operator_type_annotation
          (operator)
          (maths_operator))
        (operator)
        (maths_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close))
      (binary_operator_declaration
        (operator_type_annotation
          (operator)
          (maths_operator))
        (operator)
        (maths_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close))
      (binary_operator_declaration
        (operator_type_annotation
          (operator)
          (maths_operator))
        (operator)
        (maths_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close)))
    (implicit_block_close))
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (type_concept_instance_declaration
    (type)
    (concept)
    (instance)
    (type_concept_name)
    (custom_type_expression
      (custom_type_name))
    (eq)
    (implicit_block_open)
    (type_concept_instance_implementation
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (dot)
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close))
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (dot)
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close))
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (dot)
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close))
      (let_expression
        (let)
        (identifier)
        (eq)
        (implicit_block_open)
        (int_literal)
        (implicit_block_close))
      (let_expression
        (let)
        (identifier)
        (eq)
        (implicit_block_open)
        (int_literal)
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0075: Realistic type concept Modulo that arises from other concepts without explicit instances
===

module "canapea/math"
  exposing
    | Modulo

import "canapea/lang"
  exposing
    | Result(Ok, Error)


type PredicateMatch =
  | Match is [ Truthy ]
  | NoMatch


type Comparison =
  | GreaterThan
  | LesserThan


type concept Ord a =
  let compare : a, a -> Comparison

  exposing
    operator (>) : a, a -> PredicateMatch
    operator (>) x y =
      when compare x y is
        | GreaterThan -> Match
        | LesserThan -> NoMatch

    operator (<) : a, a -> PredicateMatch
    operator (<) x y =
      when compare x y is
        | LesserThan -> Match
        | GreaterThan -> NoMatch


type concept Comparable a =
  where [ Eq a, Ord a ]

  exposing
    operator (>=) : a, a -> PredicateMatch
    operator (>=) x y =
      when (x == y) or ((compare x y) /= LesserThan) is
        | Truthy -> Match
        | else -> NoMatch

    operator (<=) : a, a -> PredicateMatch
    operator (<=) x y =
      when (x == y) or (compare x y /= GreaterThan) is
        | Truthy -> Match
        | else -> NoMatch


type Tuple a b =
  | Tuple a b


type record ModuloData a =
  { value : a
  , remainder : a
  }


type concept Modulo a =
  where
    [ Natural a # zero, one, (+), (-) # implies? Eq a
    , Comparable a # (<), (<=) # implies? Eq a
    ]

  let modulo : a, a -> Result ModuloData [ OperandNegative ]

  exposing
    operator (%) : a, a -> Result ModuloData [ OperandNegative ]
    operator (%) x y =
      modulo x y

    let modulo x y =
      let check =
        when (x < zero) and (y < zero) is
          | Tuple LesserThan LesserThan -> Error OperandNegative
          | Tuple LesserThan _ -> Error OperandNegative
          | Tuple _ LesserThan -> Error OperandNegative
          | else -> Ok (Tuple zero x)

      let recurse =
        { (Tuple count cur) ->
            let next = cur - y
            when next <= x is
              | Truthy ->
                Ok { value = count + one, remainder = x + next }
              | else ->
                recurse (Tuple (count + one) next )
        }

      when check is
        | Error err -> check
        | Ok init -> recurse init

---

(source_file
  (development_module_declaration
    (module)
    (canapea)
    (pathSep)
    (module_name_path_fragment)
    (module_export_list
      (exposing)
      (module_export_opaque_type
        (custom_type_name)))
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_name)
            (import_expose_type_constructor
              (custom_type_constructor_name))
            (import_expose_type_constructor
              (custom_type_constructor_name)))
          (implicit_block_close)))))
  (custom_type_declaration
    (type)
    (custom_type_name)
    (eq)
    (custom_type_constructor_declaration
      (custom_type_constructor
        (custom_type_constructor_name))
      (is)
      (custom_type_constructor_applied_concept
        (custom_type_value_expression
          (custom_type_constructor_name))))
    (custom_type_constructor
      (custom_type_constructor_name)))
  (custom_type_declaration
    (type)
    (custom_type_name)
    (eq)
    (custom_type_constructor
      (custom_type_constructor_name))
    (custom_type_constructor
      (custom_type_constructor_name)))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_concept_implementation
      (exposing)
      (binary_operator_declaration
        (operator_type_annotation
          (operator)
          (boolean_operator))
        (operator)
        (boolean_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (when_expression
          (when)
          (call_expression
            (identifier)
            (call_parameter
              (value_expression
                (identifier)))
            (call_parameter
              (value_expression
                (identifier))))
          (is)
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close)))
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close))))
           (implicit_block_close))
      (binary_operator_declaration
        (operator_type_annotation
          (operator)
          (boolean_operator))
        (operator)
        (boolean_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (when_expression
          (when)
          (call_expression
            (identifier)
            (call_parameter
              (value_expression
                (identifier)))
            (call_parameter
              (value_expression
                (identifier))))
          (is)
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close)))
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close))))
        (implicit_block_close)))
    (implicit_block_close))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (where)
      (type_concept_constraint
        (type_concept_name)
        (type_variable))
      (type_concept_constraint
        (type_concept_name)
        (type_variable)))
    (type_concept_implementation
      (exposing)
      (binary_operator_declaration
        (operator_type_annotation
          (operator)
          (boolean_operator))
        (operator)
        (boolean_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (when_expression
          (when)
          (conditional_expression
            (conditional_expression
              (value_expression
                (identifier))
              (boolean_operator)
              (value_expression
                (identifier)))
            (boolean_operator)
            (conditional_expression
              (call_expression
                (identifier)
                (call_parameter
                  (value_expression
                    (identifier)))
                (call_parameter
                  (value_expression
                    (identifier))))
              (boolean_operator)
              (custom_type_value_expression
                (custom_type_constructor_name))))
          (is)
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close)))
          (when_branch_catchall
            (else)
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close))))
        (implicit_block_close))
      (binary_operator_declaration
        (operator_type_annotation
          (operator)
          (boolean_operator))
        (operator)
        (boolean_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (when_expression
          (when)
          (conditional_expression
            (conditional_expression
              (value_expression
                (identifier))
              (boolean_operator)
              (value_expression
                (identifier)))
            (boolean_operator)
            (conditional_expression
              (call_expression
                (identifier)
                (call_parameter
                  (value_expression
                    (identifier)))
                (call_parameter
                    (value_expression
                      (identifier))))
              (boolean_operator)
              (custom_type_value_expression
                (custom_type_constructor_name))))
          (is)
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close)))
          (when_branch_catchall
            (else)
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (custom_type_value_expression
                (custom_type_constructor_name))
              (implicit_block_close))))
        (implicit_block_close)))
    (implicit_block_close))
  (custom_type_declaration
    (type)
    (custom_type_name)
    (type_variable)
    (type_variable)
    (eq)
    (custom_type_constructor
      (custom_type_constructor_name)
      (type_variable)
      (type_variable)))
  (record_declaration
    (type)
    (record)
    (record_name)
    (type_variable)
    (eq)
    (record_type_expression
      (record_type_entry
        (simple_record_key)
        (colon)
        (type_variable))
      (record_type_entry
        (simple_record_key)
        (colon)
        (type_variable))))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (where)
      (type_concept_constraint
        (type_concept_name)
        (type_variable))
      (comment)
      (type_concept_constraint
        (type_concept_name)
        (type_variable))
      (comment)
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_concept_implementation
      (exposing)
      (binary_operator_declaration
        (operator_type_annotation
          (operator)
          (maths_operator))
        (operator)
        (maths_operator)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (identifier)
          (call_parameter
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close))
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (let_expression
          (let)
          (identifier)
          (eq)
          (implicit_block_open)
          (when_expression
            (when)
            (conditional_expression
              (conditional_expression
                (value_expression
                  (identifier))
                (boolean_operator)
                (value_expression
                  (identifier)))
              (boolean_operator)
              (conditional_expression
                (value_expression
                  (identifier))
                (boolean_operator)
                (value_expression
                  (identifier))))
            (is)
            (when_branch
              (when_branch_pattern
                (custom_type_pattern
                  (custom_type_constructor_name)
                  (custom_type_constructor_name)
                  (custom_type_constructor_name)))
              (arrow)
              (when_branch_consequence
                (implicit_block_open)
                (custom_type_value_expression
                  (custom_type_constructor_name)
                  (call_parameter
                    (custom_type_value_expression
                      (custom_type_constructor_name))))
                (implicit_block_close)))
            (when_branch
              (when_branch_pattern
                (custom_type_pattern
                  (custom_type_constructor_name)
                  (custom_type_constructor_name)
                  (dont_care)))
              (arrow)
              (when_branch_consequence
                (implicit_block_open)
                (custom_type_value_expression
                  (custom_type_constructor_name)
                  (call_parameter
                    (custom_type_value_expression
                      (custom_type_constructor_name))))
                (implicit_block_close)))
            (when_branch
              (when_branch_pattern
                (custom_type_pattern
                  (custom_type_constructor_name)
                  (dont_care)
                  (custom_type_constructor_name)))
              (arrow)
              (when_branch_consequence
                (implicit_block_open)
                (custom_type_value_expression
                  (custom_type_constructor_name)
                  (call_parameter
                    (custom_type_value_expression
                      (custom_type_constructor_name))))
                (implicit_block_close)))
            (when_branch_catchall
              (else)
              (arrow)
              (when_branch_consequence
                (implicit_block_open)
                (custom_type_value_expression
                  (custom_type_constructor_name)
                  (call_parameter
                    (custom_type_value_expression
                      (custom_type_constructor_name)
                      (call_parameter
                        (value_expression
                          (identifier)))
                      (call_parameter
                        (value_expression
                          (identifier))))))
                (implicit_block_close))))
          (implicit_block_close))
        (let_expression
          (let)
          (identifier)
          (eq)
          (implicit_block_open)
          (anonymous_function_expression
            (function_parameter
              (custom_type_pattern
                (custom_type_constructor_name)
                (identifier)
                (identifier)))
            (arrow)
            (let_expression
              (let)
              (identifier)
              (eq)
              (implicit_block_open)
              (binary_operator_expression
                (value_expression
                  (identifier))
                (maths_operator)
                (value_expression
                  (identifier)))
              (implicit_block_close))
            (when_expression
              (when)
              (conditional_expression
                (value_expression
                  (identifier))
                (boolean_operator)
                (value_expression
                  (identifier)))
              (is)
              (when_branch
                (when_branch_pattern
                  (custom_type_pattern
                    (custom_type_constructor_name)))
                (arrow)
                (when_branch_consequence
                  (implicit_block_open)
                  (custom_type_value_expression
                    (custom_type_constructor_name)
                    (call_parameter
                      (record_expression
                        (record_expression_entry
                          (simple_record_key)
                          (eq)
                          (binary_operator_expression
                            (value_expression
                              (identifier))
                            (maths_operator)
                            (value_expression
                              (identifier))))
                        (record_expression_entry
                          (simple_record_key)
                          (eq)
                          (binary_operator_expression
                            (value_expression
                              (identifier))
                            (maths_operator)
                            (value_expression
                              (identifier)))))))
                  (implicit_block_close)))
              (when_branch_catchall
                (else)
                (arrow)
                (when_branch_consequence
                  (implicit_block_open)
                  (call_expression
                    (identifier)
                    (call_parameter
                      (custom_type_value_expression
                        (custom_type_constructor_name)
                        (call_parameter
                          (binary_operator_expression
                            (value_expression
                              (identifier))
                            (maths_operator)
                            (value_expression
                              (identifier))))
                        (call_parameter
                          (value_expression
                            (identifier))))))
                  (implicit_block_close)))))
          (implicit_block_close))
        (when_expression
          (when)
          (value_expression
            (identifier))
          (is)
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)
                (identifier)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (value_expression
                (identifier))
              (implicit_block_close)))
          (when_branch
            (when_branch_pattern
              (custom_type_pattern
                (custom_type_constructor_name)
                (identifier)))
            (arrow)
            (when_branch_consequence
              (implicit_block_open)
              (call_expression
                (identifier)
                (call_parameter
                  (value_expression
                    (identifier))))
              (implicit_block_close))))
        (implicit_block_close)))
    (implicit_block_close)))
