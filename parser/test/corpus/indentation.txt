===
PTC0048: Trivial anonymous functions don't introduce implicit blocks
===

module

let identity = { it }

let x = 999

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (block
        (anonymous_function_expression
          (block
            (value_expression
              (identifier))))))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (block
        (value_expression
          (int_literal))))))

===
PTC0049: Anonymous functions never introduce implicit blocks
===

module

let isAnswer =
  { it ->
    let nope = 0
    when it is
    | 42 -> 1
    | else -> nope
  }

let x = 999

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      name: (identifier)
      (eq)
      body: (block
        single_return: (anonymous_function_expression
          (function_parameter
            name: (identifier))
          (arrow)
          body: (block
            binding: (let_expression
              (let)
              name: (identifier)
              (eq)
              body: (block
                single_return: (value_expression
                  (int_literal))))
            return: (when_expression
              (when)
              subject: (value_expression
                (identifier))
              (is)
              (when_branch
                (when_branch_pattern
                  (int_literal))
                (arrow)
                (when_branch_consequence
                  (value_expression
                    (int_literal))))
              (when_branch_catchall
                (else)
                (arrow)
                (when_branch_consequence
                  (value_expression
                    (identifier)))))))))
    (let_declaration
      (let)
      name: (identifier)
      (eq)
      body: (block
        single_return: (value_expression
          (int_literal))))))

===
PTC0050: De-indenting after a function declaration body closes its implicit open block
===

module

let add x =
  x

let f : Sequence String -> Sequence String
let f _ =
  42

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (function_declaration
      (let)
      (identifier)
      (function_parameter
        (identifier))
      (eq)
      (block
        (value_expression
          (identifier))))
    (function_declaration
      (type_annotation
        (let)
        (identifier))
      (let)
      (identifier)
      (function_parameter
        (dont_care))
      (eq)
      (block
        (value_expression
          (int_literal))))))

===
PTC0051: De-indenting after a let expression body closes its implicit open block
===

module

let block =
  let x = 1
  x

let f : Sequence String -> Sequence String
let f _ =
  42

---

(source_file
  (module_declaration
    (module_signature
      (module))
    (let_declaration
      (let)
      (identifier)
      (eq)
      (block
        (let_expression
          (let)
          (identifier)
          (eq)
          (block
            (value_expression
              (int_literal))))
        (value_expression
          (identifier))))
    (function_declaration
      (type_annotation
        (let)
        (identifier))
      (let)
      (identifier)
      (function_parameter
        (dont_care))
      (eq)
      (block
        (value_expression
          (int_literal))))))
