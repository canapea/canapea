===
Trivial anonymous functions don't introduce implicit blocks
===

module

let identity = { it }

let x = 999

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (anonymous_function_expression
      (value_expression
        (identifier))))
  (let_expression
    (let)
    (identifier)
    (eq)
    (int_literal)))

===
Anonymous functions never introduce implicit blocks
===

module

let isAnswer =
  { it ->
    let nope = 0
    when it is
    | 42 -> 1
    | else -> nope
  }

let x = 999

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    return: (anonymous_function_expression
      (function_parameter
        (identifier))
      (arrow)
      binding: (let_expression
        (let)
        (identifier)
        (eq)
        return: (int_literal))
      return: (when_expression
        (when)
        subject: (value_expression
          (identifier))
        (is)
        (when_branch
          (when_branch_pattern
            (int_literal))
          (arrow)
          (when_branch_consequence
            (int_literal)))
        (when_branch_catchall
          (else)
          (arrow)
          (when_branch_consequence
            (value_expression
              (identifier)))))))
  (let_expression
    (let)
    (identifier)
    (eq)
    return: (int_literal)))

===
De-indenting after a function declaration body closes its implicit open block
===

module

function add x =
  x

f: Sequence String -> Sequence String
function f _ =
  _

---

(source_file
  (module_declaration
    (module))
  (function_declaration
    (function)
    (identifier)
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    (value_expression
      (identifier))
    (implicit_block_close))
  (function_declaration
    (ignored_type_annotation
      (identifier))
    (function)
    (identifier)
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    (value_expression
      (identifier))
    (implicit_block_close)))

    (value_expression
      (identifier))
    (implicit_block_close))
  (function_declaration
    (ignored_type_annotation
      (identifier))
    (function)
    (identifier)
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    (value_expression
      (identifier))
    (implicit_block_close)))