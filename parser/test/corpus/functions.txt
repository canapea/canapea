===
Simple function with trivial body
===

module

function identity x =
  x

---

(source_file
  (module_declaration
    (module))
  (function_declaration
    (function)
    name: (identifier)
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    single_return: (value_expression
      (identifier))
    (implicit_block_close)))

===
Simple function with multiple parameters
===

module

function fst x y z =
  x

---

(source_file
  (module_declaration
    (module))
  (function_declaration
    (function)
    name: (identifier)
    (function_parameter
      (identifier))
    (function_parameter
      (identifier))
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    single_return: (value_expression
      (identifier))
    (implicit_block_close)))

===
Function with record pattern parameter
===

module

function pickX { x, y, z } =
  x

---

(source_file
  (module_declaration
    (module))
  (function_declaration
    (function)
    name: (identifier)
    (function_parameter
      (record_pattern
        (simple_record_key)
        (simple_record_key)
        (simple_record_key)))
    (eq)
    (implicit_block_open)
    single_return: (value_expression
      (identifier))
    (implicit_block_close)))

===
Function with sequence pattern parameter
===

module

function pickY [_, looooooooooooong, ...rest] =
  looooooooooooong

---

(source_file
  (module_declaration
    (module))
  (function_declaration
    (function)
    name: (identifier)
    (function_parameter
      (sequence_pattern
        (dont_care)
        (identifier)
        (rest_args
          (dotdotdot)
          (rest_args_identifier))))
    (eq)
    (implicit_block_open)
    single_return: (value_expression
      (identifier))
    (implicit_block_close)))

===
Function with custom type pattern parameter
===

module

function extract (Id id) =
  id

---

(source_file
  (module_declaration
    (module))
  (function_declaration
    (function)
    (identifier)
    (function_parameter
      (custom_type_pattern
        (custom_type_constructor_name)
        (identifier)))
    (eq)
    (implicit_block_open)
    (value_expression
      (identifier))
    (implicit_block_close)))

===
Simple anonymous function via top-level let binding
===

module

let giveMeTheAnswer = { 42 }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (anonymous_function_expression
      (int_literal))
    (implicit_block_close)))

===
Simple anonymous function via function declaration
:error
===

module

# Might seem neat but unless it specifically this situation
# where an anonymous function is assigned directly function
# declarations without parameters should really be syntax
# errors. If the user really wants to use that pattern the
# let binding lets them do it.
function giveMeTheAnswer =
  { 42 }

---



===
Anonymous function with params via top-level let binding
===

module

let giveMeTheAnswer =
  { x -> x }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (anonymous_function_expression
      (function_parameter
        (identifier))
      (arrow)
      (value_expression
        (identifier)))
    (implicit_block_close)))

===
Anonymous function with pattern params via top-level let binding
===

module

let pickX =
  { { x, y, z } -> x }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (anonymous_function_expression
      (function_parameter
        (record_pattern
          (simple_record_key)
          (simple_record_key)
          (simple_record_key)))
      (arrow)
      (value_expression
        (identifier)))
    (implicit_block_close)))

===
Anonymous function with pattern and normal params via top-level let binding
===

module

let pickY =
  { x, { y }, [ _, z, ...rest ], (Id id) -> id }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (anonymous_function_expression
      (function_parameter
        (identifier))
      (function_parameter
        (record_pattern
          (simple_record_key)))
      (function_parameter
        (sequence_pattern
          (dont_care)
          (identifier)
          (rest_args
            (dotdotdot)
            (rest_args_identifier))))
      (function_parameter
        (custom_type_pattern
          (custom_type_constructor_name)
          (identifier)))
      (arrow)
      (value_expression
        (identifier)))
    (implicit_block_close)))

===
Anonymous function with params and itermittent let bindings via top-level let binding
===

module

let giveMeTheAnswer =
  { x ->
    let y = 1
    let z = 2
    42
  }


---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (anonymous_function_expression
      (function_parameter
        (identifier))
      (arrow)
      (let_expression
        (let)
        (identifier)
        (eq)
        (implicit_block_open)
        (int_literal)
        (implicit_block_close))
      (let_expression
        (let)
        (identifier)
        (eq)
        (implicit_block_open)
        (int_literal)
        (implicit_block_close))
      (int_literal))
    (implicit_block_close)))

===
Compact anonymous function with when expression body via top-level let binding
===

module

let result =
  { when it is
    | 42 -> "The Answer"
    | else -> "No idea"
  }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (anonymous_function_expression
      (when_expression
        (when)
        (value_expression
          (identifier))
        (is)
        (when_branch
          (when_branch_pattern
            (int_literal))
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (string_literal)
            (implicit_block_close)))
        (when_branch_catchall
          (else)
          (arrow)
          (when_branch_consequence
            (implicit_block_open)
            (string_literal)
            (implicit_block_close)))))
    (implicit_block_close)))

===
Piping int value into function via builtin (|>) forward pipe operator
===

module

let result =
  41 |> add 1

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (operator_expression
      (int_literal)
      (operator
        (operator_identifier))
      (call_expression
        (call_target
          (value_expression
            (identifier)))
        (call_parameter
          (int_literal))))
    (implicit_block_close)))

===
Mapping over sequence multiple times via builtin (|>) forward pipe operator
===

module

let result =
  [ 40, 41, 42 ]
    |> map addOne
    |> map math.times2

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (operator_expression
      (operator_expression
        (sequence_expression
          (sequence_expression_entry
            (int_literal))
          (sequence_expression_entry
            (int_literal))
          (sequence_expression_entry
            (int_literal)))
        (operator
          (operator_identifier))
        (call_expression
          (call_target
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier)))))
      (operator
        (operator_identifier))
      (call_expression
        (call_target
          (value_expression
            (identifier)))
        (call_parameter
          (value_expression
            (qualified_access_expression
              (identifier)
              (dot)
              (identifier))))))
    (implicit_block_close)))

===
(regression) Mapping over sequence with explicit parens via (|>) should yield the same associativity grouping as leaving the parens out.
===

module

let result =
  (([ 40, 41, 42 ] |> map addOne)
    |> map math.times2
  )

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (implicit_block_open)
    (parenL)
    (operator_expression
      (parenL)
      (operator_expression
        (sequence_expression
          (sequence_expression_entry
            (int_literal))
          (sequence_expression_entry
            (int_literal))
          (sequence_expression_entry
            (int_literal)))
        (operator
          (operator_identifier))
        (call_expression
          (call_target
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier)))))
      (parenR)
      (operator
        (operator_identifier))
      (call_expression
        (call_target
          (value_expression
            (identifier)))
        (call_parameter
          (value_expression
            (qualified_access_expression
              (identifier)
              (dot)
              (identifier))))))
    (parenR)
    (implicit_block_close)))
