===
PTC0052: Empty module
===

module

---

(source_file
  (module_declaration
    (module)))

===
PTC0053: Module with exports
===

module
  exposing
    | S
    | T(..)
    | add
    | subtract
    | multiply

---

(source_file
  (module_declaration
    (module)
    (module_export_list
      (exposing)
      (module_export_opaque_type
        type: (custom_type_constructor_name))
      (module_export_type_with_constructors
        type: (custom_type_constructor_name))
      (module_export_function)
      (module_export_function)
      (module_export_function))))

===
PTC0054: Module with name declaration exporting a type with constructors
===

module "app/util"
  exposing
    | Id(..)

---

(source_file
  (module_declaration
    (module)
    (module_name_definition
      (module_name_path_fragment)
      (pathSep)
      (module_name_path_fragment))
    (module_export_list
      (exposing)
      (module_export_type_with_constructors
        type: (custom_type_constructor_name)))))

===
PTC0055: Module exporting a single function
===

module
  exposing
    | fn

---

(source_file
  (module_declaration
    (module)
    (module_export_list
      (exposing)
      (module_export_function))))

===
PTC0056: Module with qualified import
===

module

import "app/lib" as lib

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (implicit_block_open)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        qualified: (identifier)
        (implicit_block_close)))))

===
PTC0057: Module with qualified import of specific version
===

module

import "app/lib@0.5.0-alpha" as lib

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (implicit_block_open)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment)
          (versionAt)
          (module_version))
        (as)
        (identifier)
        (implicit_block_close)))))

===
PTC0058: Module with import that exposes types
===

module

import "app/lib"
  exposing
    | TypeA
    | TypeB

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (implicit_block_open)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name))
          (import_expose_type
            (custom_type_constructor_name))
          (implicit_block_close))
        (implicit_block_close)))))

===
PTC0059: Module with qualified import that also exposes types
===

module

import "app/lib" as lib
  exposing
    | Type

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (implicit_block_open)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        qualified: (identifier)
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            type: (custom_type_constructor_name))
          (implicit_block_close))
        (implicit_block_close)))))

===
PTC0060: "Side-effect" imports that are neither qualified nor expose items are syntax errors
:error
===

module

import "app/lib"

---



===
PTC0061: Module importing a specific set of constructors for Custom Types
===

module

import "app/lib"
  exposing
    | Format(Csv, Json) # omit i.e. Yaml

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (implicit_block_open)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name)
            (import_expose_type_constructor
              (custom_type_constructor_name))
            (import_expose_type_constructor
              (custom_type_constructor_name)))
          (comment)
          (implicit_block_close))
        (implicit_block_close)))))

===
PTC0062: Module importing and renaming a Custom Type and a specific set of constructors
===

module

import "app/lib"
  exposing
    | Format as LibFormat
      ( ExcelBinary as DontUseThisOrYouWillBeFired
      , OpenDocumentFormat
      )
    | DocumentId(IntId)

type X =
  | X

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (implicit_block_open)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name)
            (as)
            (custom_type_constructor_name)
            (import_expose_type_constructor
              (custom_type_constructor_name)
              (as)
              (custom_type_constructor_name))
            (import_expose_type_constructor
              (custom_type_constructor_name)))
          (import_expose_type
            (custom_type_constructor_name)
            (import_expose_type_constructor
              (custom_type_constructor_name)))
          (implicit_block_close))
        (implicit_block_close))))
  (custom_type_declaration
    (type)
    (custom_type_constructor_name)
    (eq)
    (custom_type_constructor
      (custom_type_constructor_name))))

===
PTC0063: Modules only support the published set of language features, the parser does not know what to do with unpublished syntax
:error
===

module

type concept Greet a =
  greeting : a -> String

---



===
PTC0064: Core modules support both published and unpublished language features but can only be used for language core development
===

module "core/lang"

type concept Rate a =
  rate : a -> String

  exposing
    function thumbsUp x =
      rate x

---

(source_file
  (development_module_declaration
    (module)
    (core)
    (pathSep)
    (module_name_path_fragment))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (ignored_type_annotation
          (identifier))))
    (type_concept_implementation
      (exposing)
      (function_declaration
        (function)
        (identifier)
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (call_target
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0065: Experimental modules also support both published and unpublished language features but can not be used for actual applications or libraries
===

module "experimental/lang"

type concept Rate a =
  rate : a -> String

  exposing
    function thumbsUp x =
      rate x

---

(source_file
  (development_module_declaration
    (module)
    (experimental)
    (pathSep)
    (module_name_path_fragment))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (ignored_type_annotation
          (identifier))))
    (type_concept_implementation
      (exposing)
      (function_declaration
        (function)
        (identifier)
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (call_target
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0066: Simple app with platform
===

app with
  { platform = "core/platform/cli"
  , main = main
  }


function main args =
  args

---

(source_file
  (app_declaration
    (app)
    (with)
    (record_expression
      (record_expression_entry
        (simple_record_key)
        (eq)
        (string_literal))
      (record_expression_entry
        (simple_record_key)
        (eq)
        (value_expression
          (identifier)))))
  (function_declaration
    (function)
    (identifier)
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    (value_expression
      (identifier))
    (implicit_block_close)))
