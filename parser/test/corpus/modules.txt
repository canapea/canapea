===
Empty module
===

module

---

(source_file
  (module_declaration
    (module)))

===
Module with exports
===

module
  exposing
    | T(U,V)
    | add
    | subtract
    | multiply

---

(source_file
  (module_declaration
    (module)
    (module_export_list
      (exposing)
      (module_export_type
        type: (custom_type_constructor_name)
        constructor: (custom_type_constructor_name)
        constructor: (custom_type_constructor_name))
      (module_export_function)
      (module_export_function)
      (module_export_function))))

===
Module with name declaration exporting a type with constructors
===

module as "app/util"
  exposing
    | Id(StringId, IntId)

---

(source_file
  (module_declaration
    (module)
    (as)
    (module_name_definition
      (module_name_path_fragment)
      (pathSep)
      (module_name_path_fragment))
    (module_export_list
      (exposing)
      (module_export_type
        type: (custom_type_constructor_name)
        constructor: (custom_type_constructor_name)
        constructor: (custom_type_constructor_name)))))

===
Module exporting a single function
===

module
  exposing
    | fn

---

(source_file
  (module_declaration
    (module)
    (module_export_list
      (exposing)
      (module_export_function))))

===
Module with qualified import
===

module

import "app/lib" as lib

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        qualified: (identifier)))))

===
Module with qualified import of specific version
===

module

import "app/lib@0.5.0-alpha" as lib

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment)
          (versionAt)
          (module_version))
        (as)
        (identifier)))))

===
Module with import that exposes types
===

module

import "app/lib"
  | TypeA
  | TypeB

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (import_expose_type
            (custom_type_constructor_name))
          (import_expose_type
            (custom_type_constructor_name)))))))

===
Module with qualified import that also exposes types
===

module

import "app/lib" as lib
  | Type

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        qualified: (identifier)
        (import_expose_list
          (import_expose_type
            type: (custom_type_constructor_name)))))))

===
"Side-effect" imports that are neither qualified nor expose items are syntax errors
:error
===

module

import "app/lib"

---

===
Module importing a specific set of constructors for Custom Types
===

module

import "app/lib"
  | Format(Csv, Json) # omit i.e. Yaml

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (import_expose_type
            (custom_type_constructor_name)
            (import_expose_type_constructor
              (custom_type_constructor_name))
            (import_expose_type_constructor
              (custom_type_constructor_name)))))))
  (comment))

===
Module importing and renaming a Custom Type and a specific set of constructors
===

module

import "app/lib"
  | Format as LibFormat
    ( ExcelBinary as DontUseThisOrYouWillBeFired
    , OpenDocumentFormat
    )
  | DocumentId(IntId)

type X =
  | X

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (import_expose_type
            type: (custom_type_constructor_name)
            (as)
            exposed_as: (custom_type_constructor_name)
            (import_expose_type_constructor
              constructor: (custom_type_constructor_name)
              (as)
              exposed_as: (custom_type_constructor_name))
            (import_expose_type_constructor
              constructor: (custom_type_constructor_name)))
          (import_expose_type
            type: (custom_type_constructor_name)
            (import_expose_type_constructor
              constructor: (custom_type_constructor_name)))))))
  (custom_type_declaration
    (type)
    name: (custom_type_constructor_name)
    (eq)
    (custom_type_constructor
      name: (custom_type_constructor_name))))

===
Simple app with platform
===

app with
  { platform = "core/platform/cli"
  , main = main
  }


function main args =
  args

---

(source_file
  (app_declaration
    (app)
    (with)
    (record_expression
      (record_expression_entry
        (simple_record_key)
        (eq)
        (string_literal))
      (record_expression_entry
        (simple_record_key)
        (eq)
        (value_expression
          (identifier)))))
  (function_declaration
    (function)
    (identifier)
    (function_parameter
      (identifier))
    (eq)
    (implicit_block_open)
    (value_expression
      (identifier))
    (implicit_block_close)))
