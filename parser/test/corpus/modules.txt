===
PTC0052: Empty module
===

module

---

(source_file
  (module_declaration
    (module_signature
      (module))))

===
PTC0053: Module with exports
===

module
  exposing
    | S
    | T(..)
    | add
    | subtract
    | multiply

---

(source_file
  (module_declaration
    (module_signature
      (module)
      (module_export_list
        (exposing)
        (module_export_opaque_type
          type: (custom_type_name))
        (module_export_type_with_constructors
          type: (custom_type_name))
        (module_export_value)
        (module_export_value)
        (module_export_value)))))

===
PTC0054: Module with name declaration exporting a type with constructors
===

module "app/util"
  exposing
    | Id(..)

---

(source_file
  (module_declaration
    (module_signature
      (module)
      name: (module_name_definition
        (module_name_path_fragment)
        (module_name_path_fragment))
      (module_export_list
        (exposing)
        (module_export_type_with_constructors
          type: (custom_type_name))))))

===
PTC0055: Module exporting a single function
===

module
  exposing
    | fn

---

(source_file
  (module_declaration
    (module_signature
      (module)
      (module_export_list
        (exposing)
        (module_export_value)))))

===
PTC0056: Module with qualified import
===

module

import "app/lib" as lib

---

(source_file
  (module_declaration
    (module_signature
      (module)
      (module_imports
        (import_clause
          (import)
          (module_import_name
            (module_name_path_fragment)
            (module_name_path_fragment))
          (as)
          qualified: (named_module_import))))))

===
PTC0057: Module with qualified import of specific version will be handled via build configuration not in code
:error
===

module

import "app/lib@0.5.0-alpha" as lib

---



===
PTC0058: Module with import that exposes types
===

module

import "app/lib"
  exposing
    | TypeA
    | TypeB

---

(source_file
  (module_declaration
    (module_signature
      (module)
      (module_imports
        (import_clause
          (import)
          (module_import_name
            (module_name_path_fragment)
            (module_name_path_fragment))
          (import_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_type
              (custom_type_name))
            (import_expose_type
              (custom_type_name))
            (implicit_block_close)))))))

===
PTC0059: Module with qualified import that also exposes types
===

module

import "app/lib" as lib
  exposing
    | Type

---

(source_file
  (module_declaration
    (module_signature
      (module)
      (module_imports
        (import_clause
          (import)
          (module_import_name
            (module_name_path_fragment)
            (module_name_path_fragment))
          (as)
          qualified: (named_module_import)
          (import_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_type
              type: (custom_type_name))
            (implicit_block_close)))))))

===
PTC0060: "Side-effect" imports that are neither qualified nor expose items are syntax errors
:error
===

module

import "app/lib"

---



===
PTC0061: Module importing a specific set of constructors for Custom Types
===

module

import "app/lib"
  exposing
    | Format(Csv, Json) # omit i.e. Yaml

---

(source_file
  (module_declaration
    (module_signature
      (module)
      (module_imports
        (import_clause
          (import)
          (module_import_name
            (module_name_path_fragment)
            (module_name_path_fragment))
          (import_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_type
              (custom_type_name)
              (import_expose_type_constructor
                (custom_type_constructor_name))
              (import_expose_type_constructor
                (custom_type_constructor_name)))
            (implicit_block_close))))))
  (comment))

===
PTC0062: Module importing and renaming a Custom Type and a specific set of constructors
===

module

import "app/lib"
  exposing
    | Format as LibFormat
      ( ExcelBinary as DontUseThisOrYouWillBeFired
      , OpenDocumentFormat
      )
    | DocumentId(IntId)

type X =
  | X

---

(source_file
  (module_declaration
    (module_signature
      (module)
      (module_imports
        (import_clause
          (import)
          (module_import_name
            (module_name_path_fragment)
            (module_name_path_fragment))
          (import_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_type
              (custom_type_name)
              (as)
              (custom_type_name)
              (import_expose_type_constructor
                (custom_type_constructor_name)
                (as)
                (custom_type_constructor_name))
              (import_expose_type_constructor
                (custom_type_constructor_name)))
            (import_expose_type
              (custom_type_name)
              (import_expose_type_constructor
                (custom_type_constructor_name)))
            (implicit_block_close)))))
    (custom_type_declaration
      (type)
      (custom_type_name)
      (eq)
      (custom_type_constructor
        (custom_type_constructor_name)))))

===
PTC0063: Modules only support the published set of language features, the parser does not know what to do with unpublished syntax
:error
===

module

type concept Greet a =
  let greeting : a -> String

---



===
PTC0064: Development modules support both published and unpublished language features but can only be used for language core development
===

module "canapea::lang"

type concept Rate a =
  let rate : a -> String

  exposing
    let thumbsUp x =
      rate x

---

(source_file
  (kernel_module_expression
    (module_signature
      (module)
      name: (module_name_definition
        privileged_namespace: (canapea)
        (module_name_path_fragment)))
    concept: (type_concept_declaration
      (type)
      (concept)
      (type_concept_name)
      (type_variable)
      (eq)
      (implicit_block_open)
      (type_concept_requirements
        (type_concept_required_declaration
          (type_annotation
            (let)
            name: (identifier))))
      (type_concept_implementation
        (exposing)
        (function_declaration
          (let)
          name: (identifier)
          (function_parameter
            name: (identifier))
          (eq)
          (implicit_block_open)
          body: (block
            single_return: (call_expression
              immediate_target: (identifier)
              parameter: (call_parameter
                (value_expression
                  (identifier)))))
          (implicit_block_close)))
      (implicit_block_close))))

===
PTC0065: Experimental modules also support both published and unpublished language features but can not be used for actual applications or libraries
===

module "experimental::lang"

type concept Rate a =
  let rate : a -> String

  exposing
    let thumbsUp x =
      rate x

---

(source_file
  (experimental_module_declaration
    (module_signature
      (module)
      name: (module_name_definition
        privileged_namespace: (experimental)
        (module_name_path_fragment)))
    concept: (type_concept_declaration
      (type)
      (concept)
      (type_concept_name)
      (type_variable)
      (eq)
      (implicit_block_open)
      (type_concept_requirements
        (type_concept_required_declaration
          (type_annotation
            (let)
            name: (identifier))))
      (type_concept_implementation
        (exposing)
        (function_declaration
          (let)
          name: (identifier)
          (function_parameter
            name: (identifier))
          (eq)
          (implicit_block_open)
          body: (block
            single_return: (call_expression
              immediate_target: (identifier)
              parameter: (call_parameter
                (value_expression
                  (identifier)))))
          (implicit_block_close)))
      (implicit_block_close))))

===
PTC0066: Simple application importing capabilities
===

application

import capability "canapea::io"
  exposing
    | +StdOut

import capability "canapea::net"
  exposing
    | +NetRead


---

(source_file
  (application_declaration
    (module_signature
      (application)
      (application_imports
        (import_capability_clause
          (import)
          (capability)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (import_capability_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_capability
              (capability_name))
            (implicit_block_close)))
        (import_capability_clause
          (import)
          (capability)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (import_capability_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_capability
              (capability_name))
            (implicit_block_close)))))))

===
PTC0078: Simple application with both normal and capability imports
===

application

import capability "canapea::io"
  exposing
    | +StdOut

import "canapea::format" as fmt


---

(source_file
  (application_declaration
    (module_signature
      (application)
      (application_imports
        (import_capability_clause
          (import)
          (capability)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (import_capability_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_capability
              (capability_name))
            (implicit_block_close)))
        (import_clause
          (import)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (as)
          (named_module_import))))))

===
PTC0081: An application with static configuration returned from an anonymous function
===

application

import "canapea::codec" as codec
  exposing
    | EncodedValue
import "canapea::codec/json" as json


application config
  { opaque ->
    let staticMeta =
      { name = module.name
      , package = module.package
      , mode = application.mode
      # ...
      }

    let config = codec.decode (json.codec opaque)
    { config = config
    , main = main
    }
  }

expect application.config.baseUrl == "http://example.org"

let main _ =
  debug.todo _

---

(source_file
  (application_declaration
    (module_signature
      (application)
      (application_imports
        (import_clause
          (import)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (as)
          (named_module_import)
          (import_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_type
              (custom_type_name))
            (implicit_block_close)))
        (import_clause
          (import)
          (module_import_name
            (canapea)
            (module_name_path_fragment)
            (module_name_path_fragment))
          (as)
          (named_module_import)))
      (application_config_declaration
        (application)
        (config)
        (anonymous_function_expression
          (function_parameter
            (identifier))
          (arrow)
          (block
            (let_expression
              (let)
              (identifier)
              (eq)
              (implicit_block_open)
              (block
                (record_expression
                  (record_expression_entry
                    (simple_record_key)
                    (eq)
                    (metadata_access_expression
                      (module)
                      (dot)
                      (identifier)))
                  (record_expression_entry
                    (simple_record_key)
                    (eq)
                    (metadata_access_expression
                      (module)
                      (dot)
                      (identifier)))
                  (record_expression_entry
                    (simple_record_key)
                    (eq)
                    (metadata_access_expression
                      (application)
                      (dot)
                      (identifier)))
                  (comment)))
              (implicit_block_close))
            (let_expression
              (let)
              (identifier)
              (eq)
              (implicit_block_open)
              (block
                (call_expression
                  (identifier)
                  (dot)
                  (identifier)
                  (call_parameter
                    (call_expression
                      (identifier)
                      (dot)
                      (identifier)
                      (call_parameter
                        (value_expression
                          (identifier)))))))
              (implicit_block_close))
            (record_expression
              (record_expression_entry
                (simple_record_key)
                (eq)
                (value_expression
                  (identifier)))
              (record_expression_entry
                (simple_record_key)
                (eq)
                (value_expression
                  (identifier))))))))
    (test_expectation
      (expect)
      (conditional_expression
        (metadata_access_expression
          (application)
          (dot)
          (identifier)
          (dot)
          (identifier))
        (boolean_operator)
        (value_expression
          (string_literal))))
    (function_declaration
      (let)
      (identifier)
      (function_parameter
        (dont_care))
      (eq)
      (implicit_block_open)
      (block
        (todo_expression
          (debug_todo)
          (dont_care)))
      (implicit_block_close))))

===
PTC0085: An application with simple static configuration
===

application

import "canapea::codec" as codec
  exposing
    | EncodedValue
import "canapea::codec/json" as json


application config
  { config = config
  , main = main
  }

expect application.config.baseUrl == "http://example.org"

let main _ =
  debug.todo _

---

(source_file
  (application_declaration
    (module_signature
      (application)
      (application_imports
        (import_clause
          (import)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (as)
          (named_module_import)
          (import_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_type
              (custom_type_name))
            (implicit_block_close)))
        (import_clause
          (import)
          (module_import_name
            (canapea)
            (module_name_path_fragment)
            (module_name_path_fragment))
          (as)
          (named_module_import)))
      (application_config_declaration
        (application)
        (config)
        (application_config_record_expression
          (record_expression_entry
            (simple_record_key)
            (eq)
            (value_expression
              (identifier)))
          (record_expression_entry
            (simple_record_key)
            (eq)
            (value_expression
              (identifier))))))
    (test_expectation
      (expect)
      (conditional_expression
        (metadata_access_expression
          (application)
          (dot)
          (identifier)
          (dot)
          (identifier))
        (boolean_operator)
        (value_expression
          (string_literal))))
    (function_declaration
      (let)
      (identifier)
      (function_parameter
        (dont_care))
      (eq)
      (implicit_block_open)
      (block
        (todo_expression
          (debug_todo)
          (dont_care)))
      (implicit_block_close))))

===
PTC0086: A development module with build instructions via an anonymous function
===

module "canapea::experiments/build"

import "canapea::codec" as codec
  exposing
    | EncodedValue
import "canapea::codec/json" as json


module build
  { { host } compileTime ->
    let staticMeta =
      { name = module.name
      , package = module.package
      # ...
      }

    # TODO: Do sth with `host` and `compileTime`
    { overrides =
      {}
    }
  }

expect 1 == 1

---

(source_file
  (kernel_module_expression
    (module_signature
      (module)
      (module_name_definition
        (canapea)
        (module_name_path_fragment)
        (module_name_path_fragment))
      (module_imports
        (import_clause
          (import)
          (module_import_name
            (canapea)
            (module_name_path_fragment))
          (as)
          (named_module_import)
          (import_expose_list
            (exposing)
            (implicit_block_open)
            (import_expose_type
              (custom_type_name))
            (implicit_block_close)))
        (import_clause
          (import)
          (module_import_name
            (canapea)
            (module_name_path_fragment)
            (module_name_path_fragment))
          (as)
          (named_module_import)))
      (module_build_declaration
        (module)
        (build)
        (anonymous_function_expression
          (function_parameter
            (record_pattern
              (simple_record_key)))
          (function_parameter
            (identifier))
          (arrow)
          (block
            (let_expression
              (let)
              (identifier)
              (eq)
              (implicit_block_open)
              (block
                (record_expression
                  (record_expression_entry
                    (simple_record_key)
                    (eq)
                    (metadata_access_expression
                      (module)
                      (dot)
                      (identifier)))
                  (record_expression_entry
                    (simple_record_key)
                    (eq)
                    (metadata_access_expression
                      (module)
                      (dot)
                      (identifier)))
                  (comment)))
              (implicit_block_close))
            (comment)
            (record_expression
              (record_expression_entry
                (simple_record_key)
                (eq)
                (record_expression)))))))
    (test_expectation
      (expect)
      (conditional_expression
        (value_expression
          (int_literal))
        (boolean_operator)
        (value_expression
          (int_literal))))))

===
PTC0089: A source file only supports one application
:error
===

application

application

---



===
PTC0090: A source file only supports one module
:error
===

module "app/lib1"

module "app/lib2"

---



===
PTC0091: A source file only supports one experimental module
:error
===

module "experimental/lib1"

module "experimental/lib2"

---



===
PTC0093: A source file supports an optional application with multiple kernel modules
===

application

let main _ =
  debug.todo _


module "canapea::first"

type concept instance Greet It =
  let hello _ = debug.todo _


module "canapea::second"

type concept instance Greet It =
  let hello _ = debug.todo _

---

(source_file
  (application_declaration
    (module_signature
      (application))
    (function_declaration
      (let)
      (identifier)
      (function_parameter
        (dont_care))
      (eq)
      (implicit_block_open)
      (block
        (todo_expression
          (debug_todo)
          (dont_care)))
      (implicit_block_close)))
  (kernel_module_expression
    (module_signature
      (module)
      (module_name_definition
        (canapea)
        (module_name_path_fragment)))
    (type_concept_instance_declaration
      (type)
      (concept)
      (instance)
      (type_concept_name)
      (custom_type_expression
        (custom_type_name))
      (eq)
      (implicit_block_open)
      (type_concept_instance_implementation
        (function_declaration
          (let)
          (identifier)
          (function_parameter
            (dont_care))
          (eq)
          (implicit_block_open)
          (block
            (todo_expression
              (debug_todo)
              (dont_care)))
          (implicit_block_close)))
      (implicit_block_close)))
  (kernel_module_expression
    (module_signature
      (module)
      (module_name_definition
        (canapea)
        (module_name_path_fragment)))
    (type_concept_instance_declaration
      (type)
      (concept)
      (instance)
      (type_concept_name)
      (custom_type_expression
        (custom_type_name))
      (eq)
      (implicit_block_open)
      (type_concept_instance_implementation
        (function_declaration
          (let)
          (identifier)
          (function_parameter
            (dont_care))
          (eq)
          (implicit_block_open)
          (block
            (todo_expression
              (debug_todo)
              (dont_care)))
          (implicit_block_close)))
      (implicit_block_close))))
