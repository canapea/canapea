===
PTC0052: Empty module
===

module

---

(source_file
  (module_declaration
    (module)))

===
PTC0053: Module with exports
===

module
  exposing
    | S
    | T(..)
    | add
    | subtract
    | multiply

---

(source_file
  (module_declaration
    (module)
    (module_export_list
      (exposing)
      (module_export_opaque_type
        type: (custom_type_constructor_name))
      (module_export_type_with_constructors
        type: (custom_type_constructor_name))
      (module_export_value)
      (module_export_value)
      (module_export_value))))

===
PTC0054: Module with name declaration exporting a type with constructors
===

module "app/util"
  exposing
    | Id(..)

---

(source_file
  (module_declaration
    (module)
    name: (module_name_definition
      (module_name_path_fragment)
      (pathSep)
      (module_name_path_fragment))
    (module_export_list
      (exposing)
      (module_export_type_with_constructors
        type: (custom_type_constructor_name)))))

===
PTC0055: Module exporting a single function
===

module
  exposing
    | fn

---

(source_file
  (module_declaration
    (module)
    (module_export_list
      (exposing)
      (module_export_value))))

===
PTC0056: Module with qualified import
===

module

import "app/lib" as lib

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        qualified: (named_module_import)))))

===
PTC0057: Module with qualified import of specific version will be handled via build configuration not in code
:error
===

module

import "app/lib@0.5.0-alpha" as lib

---


===
PTC0058: Module with import that exposes types
===

module

import "app/lib"
  exposing
    | TypeA
    | TypeB

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name))
          (import_expose_type
            (custom_type_constructor_name))
          (implicit_block_close))))))

===
PTC0059: Module with qualified import that also exposes types
===

module

import "app/lib" as lib
  exposing
    | Type

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        qualified: (named_module_import)
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            type: (custom_type_constructor_name))
          (implicit_block_close))))))

===
PTC0060: "Side-effect" imports that are neither qualified nor expose items are syntax errors
:error
===

module

import "app/lib"

---



===
PTC0061: Module importing a specific set of constructors for Custom Types
===

module

import "app/lib"
  exposing
    | Format(Csv, Json) # omit i.e. Yaml

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name)
            (import_expose_type_constructor
              (custom_type_constructor_name))
            (import_expose_type_constructor
              (custom_type_constructor_name)))
          (implicit_block_close)))))
  (comment))

===
PTC0062: Module importing and renaming a Custom Type and a specific set of constructors
===

module

import "app/lib"
  exposing
    | Format as LibFormat
      ( ExcelBinary as DontUseThisOrYouWillBeFired
      , OpenDocumentFormat
      )
    | DocumentId(IntId)

type X =
  | X

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name)
            (as)
            (custom_type_constructor_name)
            (import_expose_type_constructor
              (custom_type_constructor_name)
              (as)
              (custom_type_constructor_name))
            (import_expose_type_constructor
              (custom_type_constructor_name)))
          (import_expose_type
            (custom_type_constructor_name)
            (import_expose_type_constructor
              (custom_type_constructor_name)))
          (implicit_block_close)))))
  (custom_type_declaration
    (type)
    (custom_type_constructor_name)
    (eq)
    (custom_type_constructor
      (custom_type_constructor_name))))

===
PTC0063: Modules only support the published set of language features, the parser does not know what to do with unpublished syntax
:error
===

module

type concept Greet a =
  let greeting : a -> String

---



===
PTC0064: Development modules support both published and unpublished language features but can only be used for language core development
===

module "canapea/lang"

type concept Rate a =
  let rate : a -> String

  exposing
    let thumbsUp x =
      rate x

---

(source_file
  (development_module_declaration
    (module)
    (canapea)
    (pathSep)
    (module_name_path_fragment))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_concept_implementation
      (exposing)
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (call_target
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0065: Experimental modules also support both published and unpublished language features but can not be used for actual applications or libraries
===

module "experimental/lang"

type concept Rate a =
  let rate : a -> String

  exposing
    let thumbsUp x =
      rate x

---

(source_file
  (development_module_declaration
    (module)
    (experimental)
    (pathSep)
    (module_name_path_fragment))
  (type_concept_declaration
    (type)
    (concept)
    (type_concept_name)
    (type_variable)
    (eq)
    (implicit_block_open)
    (type_concept_requirements
      (type_concept_required_declaration
        (type_annotation
          (let)
          (identifier))))
    (type_concept_implementation
      (exposing)
      (function_declaration
        (let)
        (identifier)
        (function_parameter
          (identifier))
        (eq)
        (implicit_block_open)
        (call_expression
          (call_target
            (value_expression
              (identifier)))
          (call_parameter
            (value_expression
              (identifier))))
        (implicit_block_close)))
    (implicit_block_close)))

===
PTC0066: Simple application importing capabilities
===

application

import capability "canapea/io"
  exposing
    | StdOut

import capability "canapea/net"
  exposing
    | NetRead


---

(source_file
  (application_declaration
    (application)
    (application_imports
      (import_capability_clause
        (import)
        (capability)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name))
          (implicit_block_close)))
      (import_capability_clause
        (import)
        (capability)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name))
          (implicit_block_close))))))

===
PTC0078: Simple application with both normal and capability imports
===

application

import capability "canapea/io"
  exposing
    | StdOut

import "canapea/format" as fmt


---

(source_file
  (application_declaration
    (application)
    (application_imports
      (import_capability_clause
        (import)
        (capability)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name))
          (implicit_block_close)))
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        (named_module_import)))))

===
PTC0081: An application with a static configuration
===

application

import "canapea/codec" as codec
  exposing
    | EncodedValue
import "canapea/codec/json" as json


application config
  { opaque ->
    let staticMeta =
      { name = module.name
      , package = module.package
      , mode = application.mode
      # ...
      }

    let config = codec.decode (json.codec opaque)
    { config = config
    , main = main
    }
  }

expect application.config.baseUrl == "http://example.org"

let main _ =
  debug.todo _

---

(source_file
  (application_declaration
    (application)
    (application_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        (named_module_import)
        (import_expose_list
          (exposing)
          (implicit_block_open)
          (import_expose_type
            (custom_type_constructor_name))
          (implicit_block_close)))
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        (named_module_import)))
    (application_config_declaration
      (application)
      (config)
      (anonymous_function_expression
        (function_parameter
          (identifier))
        (arrow)
        (let_expression
          (let)
          (identifier)
          (eq)
          (implicit_block_open)
          (record_expression
            (record_expression_entry
              (simple_record_key)
              (eq)
              (value_expression
                (qualified_access_expression
                  (identifier)
                  (dot)
                  (identifier))))
            (record_expression_entry
              (simple_record_key)
              (eq)
              (value_expression
                (qualified_access_expression
                  (identifier)
                  (dot)
                  (identifier))))
            (record_expression_entry
              (simple_record_key)
              (eq)
              (value_expression
                (qualified_access_expression
                  (identifier)
                  (dot)
                  (identifier))))
            (comment))
          (implicit_block_close))
        (let_expression
          (let)
          (identifier)
          (eq)
          (implicit_block_open)
          (call_expression
            (call_target
              (value_expression
                (qualified_access_expression
                  (identifier)
                  (dot)
                  (identifier))))
            (call_parameter
              (parenL)
              (call_expression
                (call_target
                  (value_expression
                    (qualified_access_expression
                      (identifier)
                      (dot)
                      (identifier))))
                (call_parameter
                  (value_expression
                    (identifier))))
              (parenR)))
          (implicit_block_close))
        (record_expression
          (record_expression_entry
            (simple_record_key)
            (eq)
            (value_expression
              (identifier)))
          (record_expression_entry
            (simple_record_key)
            (eq)
            (value_expression
              (identifier)))))))
  (test_expectation
    (expect)
    (conditional_expression
      (binary_operator_expression
        (value_expression
          (qualified_access_expression
            (identifier)
            (dot)
            (identifier)))
        (maths_operator)
        (value_expression
          (identifier)))
      (maths_operator)
      (string_literal)))
  (function_declaration
    (let)
    (identifier)
    (function_parameter
      (dont_care))
    (eq)
    (implicit_block_open)
    (todo_expression
      (debug)
      (todo)
      (dont_care))
    (implicit_block_close)))
