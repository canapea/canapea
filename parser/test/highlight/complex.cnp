module "experimental/parser/highlight/complex"
# <- keyword.other.canapea
#       ^^^^^^^^^^^^ keyword.type.canapea
  exposing
  # <- keyword.other.canapea
    | Eq

import "canapea/number/decimal" as decimal
# <- meta.import.canapea
  exposing
# ^^^^^^^^ keyword.other.canapea
    | Decimal


type TestResults =
# <- keyword.type.canapea
#    ^^^^^^^^^^^ storage.type.canapea
  | Pass Int is [ Truthy ]
  #               ^^^^^^ union.canapea
  | Fail

# Destructuring in the wild
let (Id s id [fst] {meta}) = Id "raw-id-for-answer" 42 [1,2,3] {meta="data"}
# <- keyword.control.canapea
#   ^ punctuation.section.braces
#    ^^ union.canapea
#       ^ constant.other.canapea
#         ^^ constant.other.canapea
#            ^ punctuation.section.bracket
#             ^^^ constant.other.canapea
#                  ^ punctuation.section.bracket
#                   ^^^^ constant.other.canapea


# Boolean expressions only understand "Truthiness" and "Falsiness"
# but you can incorporate this into your data modelling by just
# telling the compiler what it should consider "truthy"
expect (Pass 42) && not Fail
# <- keyword.operator.canapea
#       ^^^^ local.function.canapea
#                ^^ keyword.operator.canapea (ENDLESS LOOP???)


type concept Eq a =
# <- keyword.type.canapea
#    ^^^^^^^ keyword.other.canapea
#            ^^ storage.type.canapea
#               ^ storage.type.canapea
  let equals : a, a -> Truthy
  
  exposing
  # <- keyword.other.canapea
    let not x =
    # <- keyword.control.canapea
      when x is
        #    ^^ keyword.control.canapea
        | Truthy -> Falsy
        | else -> Truthy
        # ^^^^ keyword.control.canapea

    operator (==) x y =
    # <- keyword.type.canapea
    #         ^^ keyword.operator.canapea
      equals x y

    operator (/=) x y =
      not (equals x y)
      # <- local.function.canapea


type concept instance Eq Decimal =
# <- keyword.type.canapea
#    ^^^^^^^ keyword.other.canapea
#            ^^^^^^^^ keyword.control.canapea
  let equals x y =
    decimal.equals x y
    # <- local.function.canapea
