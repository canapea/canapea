module "experimental::parser/highlight/complex"
# <- keyword.other.canapea
#       ^^^^^^^^^^^^ keyword.type.canapea
#                     ^^^^^^ string.canapea
  exposing
  # <- keyword.other.canapea
    | Eq

import "canapea::number/decimal" as decimal
# <- meta.import.canapea
  exposing
# ^^^^^^^^ keyword.other.canapea
    | Decimal

module build
# <- keyword.other.canapea
#      ^^^^^ keyword.control.canapea
  { _cfg compileTime ->
    let x = 1
    { override = {} }
  }

type TestResults =
# <- keyword.type.canapea
#    ^^^^^^^^^^^ storage.type.canapea
  | Pass Int is [ Truthy ]
  #               ^^^^^^ union.canapea
  | Fail

# Destructuring in the wild
let someId =
# <- keyword.control.canapea
  let (Id s id [fst] {meta}) = Id "raw-id-for-answer" 42 [1,2,3] {meta="data"}
  # <- keyword.control.canapea
  #   ^ punctuation.section.braces
  #    ^^ union.canapea
  #       ^ constant.other.canapea
  #         ^^ constant.other.canapea
  #            ^ punctuation.section.bracket
  #             ^^^ constant.other.canapea
  #                  ^ punctuation.section.bracket
  #                   ^^^^ constant.other.canapea
  id

# Literals, literals, literals...

let v1 = V|0.1.2
#        ^^^^^^^ constant.numeric.canapea

let v2 = V|0.1.2-rc7
#        ^^^^^^^^^^^ constant.numeric.canapea

let v3 = V|0.1.2-pre1+8.4asd8fuasn
#        ^^^^^^^^^^^^^^^^^^^^^^^^^ constant.numeric.canapea

let v4 = V|0.1.2+8.4asd8fuasn
#        ^^^^^^^^^^^^^^^^^^^^ constant.numeric.canapea

let hex = Hex|FAB
#         ^^^^^^^ constant.numeric.canapea

let oct = Octal|777
#         ^^^^^^^^^ constant.numeric.canapea

let y2k = Date|2000-01-01
#         ^^^^^^^^^^^^^^^ constant.numeric.canapea

let unix = Instant|1970-01-01T00:00:00.00000000
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.numeric.canapea

let f64 = F64|-1_234_567.89012345-e67
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.numeric.canapea

# Boolean expressions only understand "Truthiness" and "Falsiness"
# but you can incorporate this into your data modelling by just
# telling the compiler what it should consider "truthy"
expect (Pass 42) and not Fail
# <- keyword.operator.canapea
#       ^^^^ union.canapea
#                ^^^ keyword.operator.canapea
#                        ^^^^ union.canapea


type concept Eq a =
# <- keyword.type.canapea
#    ^^^^^^^ keyword.other.canapea
#            ^^ storage.type.canapea
#               ^ storage.type.canapea
  let equals : a, a -> Truthy

  where [ Magma a equals ]
  # <- keyword.other.canapea
  #       ^^^^^ storage.type.canapea

  exposing
  # <- keyword.other.canapea
    let not x =
    # <- keyword.control.canapea
      when x is
        #    ^^ keyword.control.canapea
        | Truthy -> Falsy
        | else -> Truthy
        # ^^^^ keyword.control.canapea

    operator (==) x y =
    # <- keyword.type.canapea
    #         ^^ keyword.operator.canapea
      equals x y

    operator (/=) x y =
      not (equals x y)
      # <- local.function.canapea


type concept instance Eq Decimal =
# <- keyword.type.canapea
#    ^^^^^^^ keyword.other.canapea
#            ^^^^^^^^ keyword.control.canapea
  let equals x y =
    decimal.equals x y
    #       ^^^^^^ local.function.canapea
