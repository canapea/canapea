module "canapea/lang/int"
  exposing
    | Int
    | equals
    # TODO: Syntax for exposing all module content from i.e. `int/builtin`?
    # | builtin.*
    # | add = builtin.add
    # | subtract = builtin.subtract
    # | multiply = builtin.multiply
    # | zero = builtin.zero
    # | one = builtin.one
    # | builtin.add
    # | builtin.subtract
    # | builtin.multiply
    # | builtin.zero
    # | builtin.one


# TODO: Constrained numbers?
# TODO: Syntax for numbers with units?

import "canapea/lang/int/internal" as internal
  exposing
    | Int


# TODO: Do we allow name shadowing?
# let intEquals = { x, y -> equals x y }


type concept instance Equatable Int =
  let equals = internal.equals


type concept instance Natural Int =
  let add = internal.add
  let subtract = internal.subtract
  let multiply = internal.multiply
  let one = internal.one
  let zero = internal.zero
