module "canapea/lang"
  exposing
    | Equatable
    | Truthy
    | Falsy


type Truthiness =
  | IsTruthy
  | IsFalsy


"""
# "Attachable" to specific Custom Type constructors to make them act
# like Boolean.True in other languages. Helps to avoid the common
# Boolean-Blindness anti-pattern.

```canapea
type TestResult =
  | Pass Int is [ Truthy ]
  | Partial Int is [ Truthy, Comparable ]
  | Fail Int

let threshold = 20
let pass = Pass 42
let partial = Partial 23
let fail = Fail 10
expect pass && (partial >= threshold) && (not fail)
```
"""
type constructor concept Truthy k =
  let isTruthy : k -> Truthiness

  exposing
    let isFalsy x =
      when isTruthy x is
        | IsTruthy -> IsFalsy
        | else -> IsTruthy


type constructor concept Falsy k =
  let isFalsy : k -> Truthiness

  exposing
    let isTruthy x =
      when isFalsy x is
        | IsFalsy -> IsTruthy
        | else -> IsFalsy


"""
# Can be implemented for types so you get (not), (==) and (/=) for free.
"""
type concept Equatable a =
  let equals : a, a -> Truthy

  exposing
    let not x =
      when x is
        | Truthy -> Falsy
        | else -> Truthy

    operator (==) x y =
      equals x y

    operator (/=) x y =
      not (equals x y)

