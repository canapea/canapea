module "canapea/lang"
  exposing
    | Capability
    | Comparable
    | Comparison
    | Equatable
    | Falsy
    | Orderable
    | Truthy


type concept Capability a =
  # let provide : a -> Driver a
  debug.todo _


type Truthiness =
  | IsTruthy
  | IsFalsy


"""
# "Attachable" to specific Custom Type constructors to make them act
# like Boolean.True in other languages. Helps to avoid the common
# Boolean-Blindness anti-pattern.

```canapea
type TestResult =
  | Pass Int is [ Truthy ]
  | Partial Int is [ Truthy, +Comparable ]
  | Fail Int

let threshold = 20
let pass = Pass 42
let partial = Partial 23
let fail = Fail 10
expect pass && (partial >= threshold) && (not fail)
```
"""
type constructor concept Truthy k =
  let isTruthy : k -> Truthiness

  exposing
    let isFalsy x =
      when isTruthy x is
        | IsTruthy -> IsFalsy
        | else -> IsTruthy


type constructor concept Falsy k =
  let isFalsy : k -> Truthiness

  exposing
    let isTruthy x =
      when isFalsy x is
        | IsFalsy -> IsTruthy
        | else -> IsFalsy


"""
# Can be implemented for types so you get (not), (==) and (/=) for free.
"""
type concept Equatable a =
  let equals : a, a -> Eventual Truthiness _

  exposing
    let not x =
      when x is
        | Truthy -> Falsy
        | else -> Truthy

    operator (==) x y =
      equals x y

    operator (/=) x y =
      not (equals x y)

type PredicateMatch =
  | Match is [ Affirmative ]
  | NoMatch


type Comparison =
  | GreaterThan
  | LesserThan


# TODO: Naming `Ord`/`Orderable`?
type concept Orderable a =
  let compare : a, a -> Comparison

  exposing
    operator (>) : a, a -> PredicateMatch
    operator (>) x y =
      when compare x y is
        | GreaterThan -> Match
        | LesserThan -> NoMatch

    operator (<) : a, a -> PredicateMatch
    operator (<) x y =
      when compare x y is
        | LesserThan -> Match
        | GreaterThan -> NoMatch


# TODO: Naming `Comparable`?
type concept Comparable a =
  where [ Equatable a, Orderable a ]

  exposing
    operator (>=) : a, a -> PredicateMatch
    operator (>=) x y =
      when (x == y) or (compare x y /= LesserThan) is
        | Truthy -> Match
        | else -> NoMatch

    operator (<=) : a, a -> PredicateMatch
    operator (<=) x y =
      when (x == y) or (compare x y /= GreaterThan) is
        | Truthy -> Match
        | else -> NoMatch
