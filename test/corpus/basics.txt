===
Line comments
===

# Comment outside module

module

# Comment inside module

function _ x = # Comment after function declaration
  # Comment in function body
  x # Comment after expression

# Comment after function

---


(source_file
  (comment)
  (module_declaration
    (module))
  (comment)
  (function_declaration
    (function)
    (identifier)
    (function_param
      (identifier))
    (eq)
    (comment)
    (comment)
    (value_expression
      (identifier)))
  (comment)
  (comment))


===
Toplevel let binding to Int literal
===

module

let zero = 0
let answer = 42
let notTheAnswer = -42
let largeNumber = 1_000_000

---


(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (value_expression
      (int_literal)))
  (let_expression
    (let)
    (identifier)
    (eq)
    (value_expression
      (int_literal)))
  (let_expression
    (let)
    (identifier)
    (eq)
    (value_expression
      (int_literal)))
  (let_expression
    (let)
    (identifier)
    (eq)
    (value_expression
      (int_literal))))



===
Toplevel let binding to String literal
===

module

let string = "this is a string"

---


(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (value_expression
      (string_literal))))

      