===
Line comments
===

# Comment outside module

module

# Comment inside module

function _ x = # Comment after function declaration
  # Comment in function body
  x # Comment after expression

# Comment after function

---

(source_file
  (comment)
  (module_declaration
    (module))
  (comment)
  (function_declaration
    (function)
    (identifier)
    (function_param
      (identifier))
    (eq)
    (comment)
    (comment)
    (value_expression
      (identifier)))
  (comment)
  (comment))

===
Toplevel doc comment
===

"""
# My Module

Documentation for the module itself
"""
module

"""
Function documentation
"""
function _ x =
  x

---

(source_file
  (toplevel_docs
    (multiline_string_literal
      (open_quote)
      (regular_string_part)
      (close_quote)))
  (module_declaration
    (module))
  (toplevel_docs
    (multiline_string_literal
      (open_quote)
      (regular_string_part)
      (close_quote)))
  (function_declaration
    (function)
    (identifier)
    (function_param
      (identifier))
    (eq)
    (value_expression
      (identifier))))

===
Toplevel let binding to Int literal
===

module

let zero = 0
let answer = 42
let notTheAnswer = -42
let largeNumber = 1_000_000

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (int_literal))
  (let_expression
    (let)
    (identifier)
    (eq)
    (int_literal))
  (let_expression
    (let)
    (identifier)
    (eq)
    (int_literal))
  (let_expression
    (let)
    (identifier)
    (eq)
    (int_literal)))

===
Toplevel let binding to String literal
===

module

let string = "this is a string"

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (string_literal)))

===
Toplevel let binding to record expression
===

module

let string =
  { simple = "record"
  , number = -1
  }

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (record_expression
      (record_expression_entry
        (simple_record_key)
        (eq)
        (string_literal))
      (record_expression_entry
        (simple_record_key)
        (eq)
        (int_literal)))))

===
Toplevel let binding to sequence expression
===

module

let sequence =
  [ "some"
  , "sequence"
  ]

let splatted =
  [ ...splat
  , "some"
  , ...splaat
  , "sequence"
  , ...splaaat
  ]

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (sequence_expression
      (sequence_expression_entry
        (string_literal))
      (sequence_expression_entry
        (string_literal))))
  (let_expression
    (let)
    (identifier)
    (eq)
    (sequence_expression
      (sequence_expression_entry
        (sequence_expression_splat
          (dotdotdot)
          (sequence_expression_splat_identifier)))
      (sequence_expression_entry
        (string_literal))
      (sequence_expression_entry
        (sequence_expression_splat
          (dotdotdot)
          (sequence_expression_splat_identifier)))
      (sequence_expression_entry
        (string_literal))
      (sequence_expression_entry
        (sequence_expression_splat
          (dotdotdot)
          (sequence_expression_splat_identifier))))))

===
Simple when expression via top-level let binding
===

module

let a =
  when a is
  | 1 -> 2
  | else -> 0

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (when_expression
      (when)
      (value_expression
        (identifier))
      (is)
      (when_branch
        (when_branch_pattern
          (int_literal))
        (arrow)
        (when_branch_consequence
          (int_literal)))
      (when_branch
        (when_branch_pattern
          (else))
        (arrow)
        (when_branch_consequence
          (int_literal))))))

===
Complex when expression with guard via top-level let binding
===

module

let a =
  when a is
  | { m } where m == 1 -> m
  | [ _, n, ...rest ] where n == 2 -> rest
  | 3 -> a
  | else -> 0

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (when_expression
      (when)
      (value_expression
        (identifier))
      (is)
      (when_branch
        (when_branch_pattern
          (record_pattern
            (simple_record_key)))
        (where)
        (when_branch_pattern_guard
          (conditional_expression
            (value_expression
              (identifier))
            (eqeq)
            (int_literal)))
        (arrow)
        (when_branch_consequence
          (value_expression
            (identifier))))
      (when_branch
        (when_branch_pattern
          (sequence_pattern
            (identifier)
            (identifier)
            (rest_args
              (dotdotdot)
              (rest_args_identifier))))
        (where)
        (when_branch_pattern_guard
          (conditional_expression
            (value_expression
              (identifier))
            (eqeq)
            (int_literal)))
        (arrow)
        (when_branch_consequence
          (value_expression
            (identifier))))
      (when_branch
        (when_branch_pattern
          (int_literal))
        (arrow)
        (when_branch_consequence
          (value_expression
            (identifier))))
      (when_branch
        (when_branch_pattern
          (else))
        (arrow)
        (when_branch_consequence
          (int_literal))))))

===
Simple call expression via top-level let binding
===

module

let a = fn "arg"

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (call_expression
      (call_target
        (identifier))
      (call_param
        (string_literal)))))

===
Simple call expression on qualified identifier via top-level let binding
===

module

let a = lib.fn "arg"

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (call_expression
      (call_target
        (qualified_accessor
          (identifier)
          (dot)
          (identifier)))
      (call_param
        (string_literal)))))

===
Expressions surrounded in parens via top-level let binding
===

module

let int = (1)
let string = ("a string")
let function = f (g 1 "blubb") (lib.compute { x = 42 })

---

(source_file
  (module_declaration
    (module))
  (let_expression
    (let)
    (identifier)
    (eq)
    (parenL)
    (int_literal)
    (parenR))
  (let_expression
    (let)
    (identifier)
    (eq)
    (parenL)
    (string_literal)
    (parenR))
  (let_expression
    (let)
    (identifier)
    (eq)
    (call_expression
      (call_target
        (identifier))
      (call_param
        (parenL)
        (call_expression
          (call_target
            (identifier))
          (call_param
            (int_literal))
          (call_param
            (string_literal)))
        (parenR))
      (call_param
        (parenL)
        (call_expression
          (call_target
            (qualified_accessor
              (identifier)
              (dot)
              (identifier)))
          (call_param
            (record_expression
              (record_expression_entry
                (simple_record_key)
                (eq)
                (int_literal)))))
        (parenR)))))
