===
Empty module
===

module

---

(source_file
  (module_declaration
    (module)))

===
Module with exports
===

module
  | add
  | subtract
  | multiply

---

(source_file
  (module_declaration
    (module)
    (module_export_list
      (identifier)
      (identifier)
      (identifier))))

===
Module with name declaration
===

module as "app/util"
  | fn

---

(source_file
  (module_declaration
    (module)
    (as)
    (module_name_definition
      (module_name_path_fragment)
      (pathSep)
      (module_name_path_fragment))
    (module_export_list
      (identifier))))

===
Module with qualified import
===

module

import "app/lib" as lib

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        qualified: (identifier)))))

===
Module with qualified import of specific version
===

module

import "app/lib@0.5.0-alpha" as lib

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment)
          (versionAt)
          (module_version))
        (as)
        (identifier)))))

===
Module with import that exposes types
===

module

import "app/lib"
  | TypeA
  | TypeB

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (import_expose_list
          (import_expose_item)
          (import_expose_item))))))

===
Module with qualified import that also exposes types
===

module

import "app/lib" as lib
  | Type

---

(source_file
  (module_declaration
    (module)
    (module_imports
      (import_clause
        (import)
        (module_import_name
          (module_name_path_fragment)
          (pathSep)
          (module_name_path_fragment))
        (as)
        qualified: (identifier)
        (import_expose_list
          (import_expose_item))))))

===
"Side-effect" imports that are neither qualified nor expose items are syntax errors
:error
===

module

import "app/lib"

---



===
Simple app with platform
===

app with
  { platform = "core/platform/cli"
  , main = main
  }


function main args =
  args

---

(source_file
  (app_declaration
    (app)
    (with)
    (record_expression
      (record_expression_entry
        (simple_record_key)
        (eq)
        (string_literal))
      (record_expression_entry
        (simple_record_key)
        (eq)
        (value_expression
          (identifier)))))
  (function_declaration
    (function)
    (identifier)
    (function_parameter
      (identifier))
    (eq)
    (value_expression
      (identifier))))
